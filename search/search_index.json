{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"gateway-api Jsonnet library","text":"<p>This library is generated with <code>k8s</code>.</p> <ul> <li>0.7</li> <li>0.8</li> <li>1.0</li> </ul>"},{"location":"0.7/","title":"gateway-api","text":"<pre><code>local gateway-api = import \"github.com/jsonnet-libs/gateway-api-libsonnet/0.7/main.libsonnet\"\n</code></pre> <ul> <li>gateway</li> </ul>"},{"location":"0.7/gateway/","title":"gateway","text":"<ul> <li>v1alpha2</li> <li>v1beta1</li> </ul>"},{"location":"0.7/gateway/v1alpha2/","title":"gateway.v1alpha2","text":"<ul> <li>gateway</li> <li>gatewayClass</li> <li>httpRoute</li> <li>referenceGrant</li> </ul>"},{"location":"0.7/gateway/v1alpha2/gateway/","title":"gateway.v1alpha2.gateway","text":"<p>\"Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withGatewayClassName(gatewayClassName)</code></li> <li><code>fn withListeners(listeners)</code></li> <li><code>fn withListenersMixin(listeners)</code></li> <li><code>obj spec.addresses</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.listeners</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> <li><code>obj spec.listeners.allowedRoutes</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>obj spec.listeners.allowedRoutes.kinds</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> </ul> </li> <li><code>obj spec.listeners.allowedRoutes.namespaces</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.listeners.tls</code><ul> <li><code>fn withCertificateRefs(certificateRefs)</code></li> <li><code>fn withCertificateRefsMixin(certificateRefs)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>obj spec.listeners.tls.certificateRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.7/gateway/v1alpha2/gateway/#fields","title":"Fields","text":""},{"location":"0.7/gateway/v1alpha2/gateway/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Gateway</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of Gateway.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-specwithgatewayclassname","title":"fn spec.withGatewayClassName","text":"<pre><code>withGatewayClassName(gatewayClassName)\n</code></pre> <p>\"GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-specwithlisteners","title":"fn spec.withListeners","text":"<pre><code>withListeners(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-specwithlistenersmixin","title":"fn spec.withListenersMixin","text":"<pre><code>withListenersMixin(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-specaddresses","title":"obj spec.addresses","text":"<p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-specaddresseswithtype","title":"fn spec.addresses.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of the address.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-specaddresseswithvalue","title":"fn spec.addresses.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the address. The validity of the values will depend on the type and support by the controller. \\n Examples: <code>1.2.3.4</code>, <code>128::1</code>, <code>my-ip-address</code>.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-speclisteners","title":"obj spec.listeners","text":"<p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerswithhostname","title":"fn spec.listeners.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. \\n Implementations MUST apply Hostname matching appropriately for each of the following protocols: \\n * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. \\n For HTTPRoute and TLSRoute resources, there is an interaction with the <code>spec.hostnames</code> array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerswithname","title":"fn spec.listeners.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the Listener. This name MUST be unique within a Gateway. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerswithport","title":"fn spec.listeners.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerswithprotocol","title":"fn spec.listeners.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol specifies the network protocol this listener expects to receive. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-speclistenersallowedroutes","title":"obj spec.listeners.allowedRoutes","text":"<p>\"AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. \\n Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: \\n * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of \\\"2020-09-08 01:02:03\\\" is given precedence over a Route with a creation timestamp of \\\"2020-09-08 01:02:04\\\". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. \\n All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedrouteswithkinds","title":"fn spec.listeners.allowedRoutes.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedrouteswithkindsmixin","title":"fn spec.listeners.allowedRoutes.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-speclistenersallowedrouteskinds","title":"obj spec.listeners.allowedRoutes.kinds","text":"<p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedrouteskindswithgroup","title":"fn spec.listeners.allowedRoutes.kinds.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the Route.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedrouteskindswithkind","title":"fn spec.listeners.allowedRoutes.kinds.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the Route.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-speclistenersallowedroutesnamespaces","title":"obj spec.listeners.allowedRoutes.namespaces","text":"<p>\"Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespaceswithfrom","title":"fn spec.listeners.allowedRoutes.namespaces.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From indicates where Routes will be selected for this Gateway. Possible values are: * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-speclistenersallowedroutesnamespacesselector","title":"obj spec.listeners.allowedRoutes.namespaces.selector","text":"<p>\"Selector must be specified when From is set to \\\"Selector\\\". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of \\\"From\\\". \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressions","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressionsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabels","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabelsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-speclistenersallowedroutesnamespacesselectormatchexpressions","title":"obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithkey","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithoperator","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvalues","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvaluesmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-speclistenerstls","title":"obj spec.listeners.tls","text":"<p>\"TLS is the TLS configuration for the Listener. This field is required if the Protocol field is \\\"HTTPS\\\" or \\\"TLS\\\". It is invalid to set this field if the Protocol field is \\\"HTTP\\\", \\\"TCP\\\", or \\\"UDP\\\". \\n The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. \\n The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerstlswithcertificaterefs","title":"fn spec.listeners.tls.withCertificateRefs","text":"<pre><code>withCertificateRefs(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerstlswithcertificaterefsmixin","title":"fn spec.listeners.tls.withCertificateRefsMixin","text":"<pre><code>withCertificateRefsMixin(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerstlswithmode","title":"fn spec.listeners.tls.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: \\n - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerstlswithoptions","title":"fn spec.listeners.tls.withOptions","text":"<pre><code>withOptions(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerstlswithoptionsmixin","title":"fn spec.listeners.tls.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#obj-speclistenerstlscertificaterefs","title":"obj spec.listeners.tls.certificateRefs","text":"<p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerstlscertificaterefswithgroup","title":"fn spec.listeners.tls.certificateRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerstlscertificaterefswithkind","title":"fn spec.listeners.tls.certificateRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"Secret\\\".\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerstlscertificaterefswithname","title":"fn spec.listeners.tls.certificateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1alpha2/gateway/#fn-speclistenerstlscertificaterefswithnamespace","title":"fn spec.listeners.tls.certificateRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/","title":"gateway.v1alpha2.gatewayClass","text":"<p>\"GatewayClass describes a class of Gateways available to the user for creating Gateway resources. \\n It is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation. \\n Whenever one or more Gateways are using a GatewayClass, implementations SHOULD add the <code>gateway-exists-finalizer.gateway.networking.k8s.io</code> finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use. \\n GatewayClass is a Cluster level resource.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withControllerName(controllerName)</code></li> <li><code>fn withDescription(description)</code></li> <li><code>obj spec.parametersRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fields","title":"Fields","text":""},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of GatewayClass</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of GatewayClass.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-specwithcontrollername","title":"fn spec.withControllerName","text":"<pre><code>withControllerName(controllerName)\n</code></pre> <p>\"ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path. \\n Example: \\\"example.net/gateway-controller\\\". \\n This field is not mutable and cannot be empty. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description helps describe a GatewayClass with more details.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#obj-specparametersref","title":"obj spec.parametersRef","text":"<p>\"ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. \\n ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. \\n If the referent cannot be found, the GatewayClass's \\\"InvalidParameters\\\" status condition will be true. \\n Support: Implementation-specific\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-specparametersrefwithgroup","title":"fn spec.parametersRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-specparametersrefwithkind","title":"fn spec.parametersRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-specparametersrefwithname","title":"fn spec.parametersRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1alpha2/gatewayClass/#fn-specparametersrefwithnamespace","title":"fn spec.parametersRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/","title":"gateway.v1alpha2.httpRoute","text":"<p>\"HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withHostnames(hostnames)</code></li> <li><code>fn withHostnamesMixin(hostnames)</code></li> <li><code>fn withParentRefs(parentRefs)</code></li> <li><code>fn withParentRefsMixin(parentRefs)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>obj spec.parentRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSectionName(sectionName)</code></li> </ul> </li> <li><code>obj spec.rules</code><ul> <li><code>fn withBackendRefs(backendRefs)</code></li> <li><code>fn withBackendRefsMixin(backendRefs)</code></li> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withMatches(matches)</code></li> <li><code>fn withMatchesMixin(matches)</code></li> <li><code>obj spec.rules.backendRefs</code><ul> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.rules.backendRefs.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.backendRefs.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestMirror</code><ul> <li><code>obj spec.rules.backendRefs.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestMirror</code><ul> <li><code>obj spec.rules.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.matches</code><ul> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withQueryParams(queryParams)</code></li> <li><code>fn withQueryParamsMixin(queryParams)</code></li> <li><code>obj spec.rules.matches.headers</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.path</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.queryParams</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fields","title":"Fields","text":""},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HTTPRoute</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of HTTPRoute.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specwithhostnames","title":"fn spec.withHostnames","text":"<pre><code>withHostnames(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostname that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specwithhostnamesmixin","title":"fn spec.withHostnamesMixin","text":"<pre><code>withHostnamesMixin(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostname that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specwithparentrefs","title":"fn spec.withParentRefs","text":"<pre><code>withParentRefs(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. \\n The only kind of parent resource with \\\"Core\\\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specwithparentrefsmixin","title":"fn spec.withParentRefsMixin","text":"<pre><code>withParentRefsMixin(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. \\n The only kind of parent resource with \\\"Core\\\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specparentrefs","title":"obj spec.parentRefs","text":"<p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. \\n The only kind of parent resource with \\\"Core\\\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specparentrefswithgroup","title":"fn spec.parentRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When unspecified, \\\"gateway.networking.k8s.io\\\" is inferred. To set the core API group (such as for a \\\"Service\\\" kind referent), Group must be explicitly set to \\\"\\\" (empty string). \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specparentrefswithkind","title":"fn spec.parentRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. \\n Support: Core (Gateway) \\n Support: Implementation-specific (Other Resources)\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specparentrefswithname","title":"fn spec.parentRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specparentrefswithnamespace","title":"fn spec.parentRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. \\n Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specparentrefswithsectionname","title":"fn spec.parentRefs.withSectionName","text":"<pre><code>withSectionName(sectionName)\n</code></pre> <p>\"SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \\n * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. \\n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \\n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specruleswithbackendrefs","title":"fn spec.rules.withBackendRefs","text":"<pre><code>withBackendRefs(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specruleswithbackendrefsmixin","title":"fn spec.rules.withBackendRefsMixin","text":"<pre><code>withBackendRefsMixin(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specruleswithfilters","title":"fn spec.rules.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying a core filter multiple times has unspecified or implementation-specific conformance. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In all cases where incompatible or unsupported filters are specified, implementations MUST add a warning condition to status. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specruleswithfiltersmixin","title":"fn spec.rules.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying a core filter multiple times has unspecified or implementation-specific conformance. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In all cases where incompatible or unsupported filters are specified, implementations MUST add a warning condition to status. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specruleswithmatches","title":"fn spec.rules.withMatches","text":"<pre><code>withMatches(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specruleswithmatchesmixin","title":"fn spec.rules.withMatchesMixin","text":"<pre><code>withMatchesMixin(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefs","title":"obj spec.rules.backendRefs","text":"<p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithfilters","title":"fn spec.rules.backendRefs.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithfiltersmixin","title":"fn spec.rules.backendRefs.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithgroup","title":"fn spec.rules.backendRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithkind","title":"fn spec.rules.backendRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithname","title":"fn spec.rules.backendRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithnamespace","title":"fn spec.rules.backendRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithport","title":"fn spec.rules.backendRefs.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithweight","title":"fn spec.rules.backendRefs.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. \\n If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. \\n Support for this field varies based on the context where used.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfilters","title":"obj spec.rules.backendRefs.filters","text":"<p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfilterswithtype","title":"fn spec.rules.backendRefs.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersextensionref","title":"obj spec.rules.backendRefs.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n Support: Implementation-specific\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithgroup","title":"fn spec.rules.backendRefs.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithkind","title":"fn spec.rules.backendRefs.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithname","title":"fn spec.rules.backendRefs.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifier","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifieradd","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifierset","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirror","title":"obj spec.rules.backendRefs.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirrorbackendref","title":"obj spec.rules.backendRefs.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirect","title":"obj spec.rules.backendRefs.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithhostname","title":"fn spec.rules.backendRefs.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithport","title":"fn spec.rules.backendRefs.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithscheme","title":"fn spec.rules.backendRefs.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithstatuscode","title":"fn spec.rules.backendRefs.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirectpath","title":"obj spec.rules.backendRefs.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" would be modified to \\\"/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithtype","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifier","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifieradd","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifierset","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersurlrewrite","title":"obj spec.rules.backendRefs.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritewithhostname","title":"fn spec.rules.backendRefs.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersurlrewritepath","title":"obj spec.rules.backendRefs.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" would be modified to \\\"/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithtype","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfilters","title":"obj spec.rules.filters","text":"<p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying a core filter multiple times has unspecified or implementation-specific conformance. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In all cases where incompatible or unsupported filters are specified, implementations MUST add a warning condition to status. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfilterswithtype","title":"fn spec.rules.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersextensionref","title":"obj spec.rules.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n Support: Implementation-specific\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersextensionrefwithgroup","title":"fn spec.rules.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersextensionrefwithkind","title":"fn spec.rules.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersextensionrefwithname","title":"fn spec.rules.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestheadermodifier","title":"obj spec.rules.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithadd","title":"fn spec.rules.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremove","title":"fn spec.rules.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithset","title":"fn spec.rules.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestheadermodifieradd","title":"obj spec.rules.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestheadermodifierset","title":"obj spec.rules.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestmirror","title":"obj spec.rules.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestmirrorbackendref","title":"obj spec.rules.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestredirect","title":"obj spec.rules.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectwithhostname","title":"fn spec.rules.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectwithport","title":"fn spec.rules.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectwithscheme","title":"fn spec.rules.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectwithstatuscode","title":"fn spec.rules.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestredirectpath","title":"obj spec.rules.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" would be modified to \\\"/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectpathwithtype","title":"fn spec.rules.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersresponseheadermodifier","title":"obj spec.rules.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithadd","title":"fn spec.rules.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremove","title":"fn spec.rules.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithset","title":"fn spec.rules.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersresponseheadermodifieradd","title":"obj spec.rules.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersresponseheadermodifierset","title":"obj spec.rules.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersurlrewrite","title":"obj spec.rules.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersurlrewritewithhostname","title":"fn spec.rules.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersurlrewritepath","title":"obj spec.rules.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" would be modified to \\\"/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersurlrewritepathwithtype","title":"fn spec.rules.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesmatches","title":"obj spec.rules.matches","text":"<p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatcheswithheaders","title":"fn spec.rules.matches.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatcheswithheadersmixin","title":"fn spec.rules.matches.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatcheswithmethod","title":"fn spec.rules.matches.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatcheswithqueryparams","title":"fn spec.rules.matches.withQueryParams","text":"<pre><code>withQueryParams(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatcheswithqueryparamsmixin","title":"fn spec.rules.matches.withQueryParamsMixin","text":"<pre><code>withQueryParamsMixin(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesmatchesheaders","title":"obj spec.rules.matches.headers","text":"<p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesheaderswithname","title":"fn spec.rules.matches.headers.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent. \\n When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for \\\"Set-Cookie\\\".\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesheaderswithtype","title":"fn spec.rules.matches.headers.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the header. \\n Support: Core (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesheaderswithvalue","title":"fn spec.rules.matches.headers.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesmatchespath","title":"obj spec.rules.matches.path","text":"<p>\"Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the \\\"/\\\" path is provided.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatchespathwithtype","title":"fn spec.rules.matches.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the path Value. \\n Support: Core (Exact, PathPrefix) \\n Support: Implementation-specific (RegularExpression)\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatchespathwithvalue","title":"fn spec.rules.matches.path.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the HTTP path to match against.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#obj-specrulesmatchesqueryparams","title":"obj spec.rules.matches.queryParams","text":"<p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesqueryparamswithname","title":"fn spec.rules.matches.queryParams.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3). \\n If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored. \\n If a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is recommended that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API. \\n Users SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesqueryparamswithtype","title":"fn spec.rules.matches.queryParams.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the query parameter. \\n Support: Extended (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"0.7/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesqueryparamswithvalue","title":"fn spec.rules.matches.queryParams.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP query param to be matched.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/","title":"gateway.v1alpha2.referenceGrant","text":"<p>\"ReferenceGrant identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy. \\n Each ReferenceGrant can be used to represent a unique trust relationship. Additional Reference Grants can be used to add to the set of trusted sources of inbound references for the namespace they are defined within. \\n All cross-namespace references in Gateway API (with the exception of cross-namespace Gateway-route attachment) require a ReferenceGrant. \\n ReferenceGrant is a form of runtime verification allowing users to assert which cross-namespace object references are permitted. Implementations that support ReferenceGrant MUST NOT permit cross-namespace references which have no grant, and MUST respond to the removal of a grant by revoking the access that the grant allowed. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>fn withFromMixin(from)</code></li> <li><code>fn withTo(to)</code></li> <li><code>fn withToMixin(to)</code></li> <li><code>obj spec.from</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.to</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fields","title":"Fields","text":""},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ReferenceGrant</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of ReferenceGrant.\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-specwithfrom","title":"fn spec.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-specwithfrommixin","title":"fn spec.withFromMixin","text":"<pre><code>withFromMixin(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-specwithto","title":"fn spec.withTo","text":"<pre><code>withTo(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-specwithtomixin","title":"fn spec.withToMixin","text":"<pre><code>withToMixin(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#obj-specfrom","title":"obj spec.from","text":"<p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-specfromwithgroup","title":"fn spec.from.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-specfromwithkind","title":"fn spec.from.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field. \\n When used to permit a SecretObjectReference: \\n * Gateway \\n When used to permit a BackendObjectReference: \\n * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-specfromwithnamespace","title":"fn spec.from.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#obj-specto","title":"obj spec.to","text":"<p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-spectowithgroup","title":"fn spec.to.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-spectowithkind","title":"fn spec.to.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field: \\n * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference\"</p>"},{"location":"0.7/gateway/v1alpha2/referenceGrant/#fn-spectowithname","title":"fn spec.to.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.\"</p>"},{"location":"0.7/gateway/v1beta1/","title":"gateway.v1beta1","text":"<ul> <li>gateway</li> <li>gatewayClass</li> <li>httpRoute</li> <li>referenceGrant</li> </ul>"},{"location":"0.7/gateway/v1beta1/gateway/","title":"gateway.v1beta1.gateway","text":"<p>\"Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withGatewayClassName(gatewayClassName)</code></li> <li><code>fn withListeners(listeners)</code></li> <li><code>fn withListenersMixin(listeners)</code></li> <li><code>obj spec.addresses</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.listeners</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> <li><code>obj spec.listeners.allowedRoutes</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>obj spec.listeners.allowedRoutes.kinds</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> </ul> </li> <li><code>obj spec.listeners.allowedRoutes.namespaces</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.listeners.tls</code><ul> <li><code>fn withCertificateRefs(certificateRefs)</code></li> <li><code>fn withCertificateRefsMixin(certificateRefs)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>obj spec.listeners.tls.certificateRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.7/gateway/v1beta1/gateway/#fields","title":"Fields","text":""},{"location":"0.7/gateway/v1beta1/gateway/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Gateway</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of Gateway.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-specwithgatewayclassname","title":"fn spec.withGatewayClassName","text":"<pre><code>withGatewayClassName(gatewayClassName)\n</code></pre> <p>\"GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-specwithlisteners","title":"fn spec.withListeners","text":"<pre><code>withListeners(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-specwithlistenersmixin","title":"fn spec.withListenersMixin","text":"<pre><code>withListenersMixin(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-specaddresses","title":"obj spec.addresses","text":"<p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-specaddresseswithtype","title":"fn spec.addresses.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of the address.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-specaddresseswithvalue","title":"fn spec.addresses.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the address. The validity of the values will depend on the type and support by the controller. \\n Examples: <code>1.2.3.4</code>, <code>128::1</code>, <code>my-ip-address</code>.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-speclisteners","title":"obj spec.listeners","text":"<p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerswithhostname","title":"fn spec.listeners.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. \\n Implementations MUST apply Hostname matching appropriately for each of the following protocols: \\n * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. \\n For HTTPRoute and TLSRoute resources, there is an interaction with the <code>spec.hostnames</code> array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerswithname","title":"fn spec.listeners.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the Listener. This name MUST be unique within a Gateway. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerswithport","title":"fn spec.listeners.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerswithprotocol","title":"fn spec.listeners.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol specifies the network protocol this listener expects to receive. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-speclistenersallowedroutes","title":"obj spec.listeners.allowedRoutes","text":"<p>\"AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. \\n Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: \\n * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of \\\"2020-09-08 01:02:03\\\" is given precedence over a Route with a creation timestamp of \\\"2020-09-08 01:02:04\\\". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. \\n All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteswithkinds","title":"fn spec.listeners.allowedRoutes.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteswithkindsmixin","title":"fn spec.listeners.allowedRoutes.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-speclistenersallowedrouteskinds","title":"obj spec.listeners.allowedRoutes.kinds","text":"<p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteskindswithgroup","title":"fn spec.listeners.allowedRoutes.kinds.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the Route.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteskindswithkind","title":"fn spec.listeners.allowedRoutes.kinds.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the Route.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-speclistenersallowedroutesnamespaces","title":"obj spec.listeners.allowedRoutes.namespaces","text":"<p>\"Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespaceswithfrom","title":"fn spec.listeners.allowedRoutes.namespaces.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From indicates where Routes will be selected for this Gateway. Possible values are: * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-speclistenersallowedroutesnamespacesselector","title":"obj spec.listeners.allowedRoutes.namespaces.selector","text":"<p>\"Selector must be specified when From is set to \\\"Selector\\\". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of \\\"From\\\". \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressions","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressionsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabels","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabelsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-speclistenersallowedroutesnamespacesselectormatchexpressions","title":"obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithkey","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithoperator","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvalues","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvaluesmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-speclistenerstls","title":"obj spec.listeners.tls","text":"<p>\"TLS is the TLS configuration for the Listener. This field is required if the Protocol field is \\\"HTTPS\\\" or \\\"TLS\\\". It is invalid to set this field if the Protocol field is \\\"HTTP\\\", \\\"TCP\\\", or \\\"UDP\\\". \\n The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. \\n The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerstlswithcertificaterefs","title":"fn spec.listeners.tls.withCertificateRefs","text":"<pre><code>withCertificateRefs(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerstlswithcertificaterefsmixin","title":"fn spec.listeners.tls.withCertificateRefsMixin","text":"<pre><code>withCertificateRefsMixin(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerstlswithmode","title":"fn spec.listeners.tls.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: \\n - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerstlswithoptions","title":"fn spec.listeners.tls.withOptions","text":"<pre><code>withOptions(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerstlswithoptionsmixin","title":"fn spec.listeners.tls.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gateway/#obj-speclistenerstlscertificaterefs","title":"obj spec.listeners.tls.certificateRefs","text":"<p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithgroup","title":"fn spec.listeners.tls.certificateRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithkind","title":"fn spec.listeners.tls.certificateRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"Secret\\\".\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithname","title":"fn spec.listeners.tls.certificateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithnamespace","title":"fn spec.listeners.tls.certificateRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/","title":"gateway.v1beta1.gatewayClass","text":"<p>\"GatewayClass describes a class of Gateways available to the user for creating Gateway resources. \\n It is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation. \\n Whenever one or more Gateways are using a GatewayClass, implementations SHOULD add the <code>gateway-exists-finalizer.gateway.networking.k8s.io</code> finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use. \\n GatewayClass is a Cluster level resource.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withControllerName(controllerName)</code></li> <li><code>fn withDescription(description)</code></li> <li><code>obj spec.parametersRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fields","title":"Fields","text":""},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of GatewayClass</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of GatewayClass.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-specwithcontrollername","title":"fn spec.withControllerName","text":"<pre><code>withControllerName(controllerName)\n</code></pre> <p>\"ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path. \\n Example: \\\"example.net/gateway-controller\\\". \\n This field is not mutable and cannot be empty. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description helps describe a GatewayClass with more details.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#obj-specparametersref","title":"obj spec.parametersRef","text":"<p>\"ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. \\n ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. \\n If the referent cannot be found, the GatewayClass's \\\"InvalidParameters\\\" status condition will be true. \\n Support: Implementation-specific\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithgroup","title":"fn spec.parametersRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithkind","title":"fn spec.parametersRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithname","title":"fn spec.parametersRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithnamespace","title":"fn spec.parametersRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/","title":"gateway.v1beta1.httpRoute","text":"<p>\"HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withHostnames(hostnames)</code></li> <li><code>fn withHostnamesMixin(hostnames)</code></li> <li><code>fn withParentRefs(parentRefs)</code></li> <li><code>fn withParentRefsMixin(parentRefs)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>obj spec.parentRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSectionName(sectionName)</code></li> </ul> </li> <li><code>obj spec.rules</code><ul> <li><code>fn withBackendRefs(backendRefs)</code></li> <li><code>fn withBackendRefsMixin(backendRefs)</code></li> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withMatches(matches)</code></li> <li><code>fn withMatchesMixin(matches)</code></li> <li><code>obj spec.rules.backendRefs</code><ul> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.rules.backendRefs.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.backendRefs.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestMirror</code><ul> <li><code>obj spec.rules.backendRefs.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestMirror</code><ul> <li><code>obj spec.rules.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.matches</code><ul> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withQueryParams(queryParams)</code></li> <li><code>fn withQueryParamsMixin(queryParams)</code></li> <li><code>obj spec.rules.matches.headers</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.path</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.queryParams</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fields","title":"Fields","text":""},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HTTPRoute</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of HTTPRoute.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specwithhostnames","title":"fn spec.withHostnames","text":"<pre><code>withHostnames(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostname that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specwithhostnamesmixin","title":"fn spec.withHostnamesMixin","text":"<pre><code>withHostnamesMixin(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostname that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specwithparentrefs","title":"fn spec.withParentRefs","text":"<pre><code>withParentRefs(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. \\n The only kind of parent resource with \\\"Core\\\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specwithparentrefsmixin","title":"fn spec.withParentRefsMixin","text":"<pre><code>withParentRefsMixin(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. \\n The only kind of parent resource with \\\"Core\\\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specparentrefs","title":"obj spec.parentRefs","text":"<p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. \\n The only kind of parent resource with \\\"Core\\\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specparentrefswithgroup","title":"fn spec.parentRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When unspecified, \\\"gateway.networking.k8s.io\\\" is inferred. To set the core API group (such as for a \\\"Service\\\" kind referent), Group must be explicitly set to \\\"\\\" (empty string). \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specparentrefswithkind","title":"fn spec.parentRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. \\n Support: Core (Gateway) \\n Support: Implementation-specific (Other Resources)\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specparentrefswithname","title":"fn spec.parentRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specparentrefswithnamespace","title":"fn spec.parentRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. \\n Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specparentrefswithsectionname","title":"fn spec.parentRefs.withSectionName","text":"<pre><code>withSectionName(sectionName)\n</code></pre> <p>\"SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \\n * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. \\n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \\n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specruleswithbackendrefs","title":"fn spec.rules.withBackendRefs","text":"<pre><code>withBackendRefs(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specruleswithbackendrefsmixin","title":"fn spec.rules.withBackendRefsMixin","text":"<pre><code>withBackendRefsMixin(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specruleswithfilters","title":"fn spec.rules.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying a core filter multiple times has unspecified or implementation-specific conformance. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In all cases where incompatible or unsupported filters are specified, implementations MUST add a warning condition to status. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specruleswithfiltersmixin","title":"fn spec.rules.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying a core filter multiple times has unspecified or implementation-specific conformance. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In all cases where incompatible or unsupported filters are specified, implementations MUST add a warning condition to status. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specruleswithmatches","title":"fn spec.rules.withMatches","text":"<pre><code>withMatches(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specruleswithmatchesmixin","title":"fn spec.rules.withMatchesMixin","text":"<pre><code>withMatchesMixin(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefs","title":"obj spec.rules.backendRefs","text":"<p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithfilters","title":"fn spec.rules.backendRefs.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithfiltersmixin","title":"fn spec.rules.backendRefs.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithgroup","title":"fn spec.rules.backendRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithkind","title":"fn spec.rules.backendRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithname","title":"fn spec.rules.backendRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithnamespace","title":"fn spec.rules.backendRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithport","title":"fn spec.rules.backendRefs.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithweight","title":"fn spec.rules.backendRefs.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. \\n If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. \\n Support for this field varies based on the context where used.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfilters","title":"obj spec.rules.backendRefs.filters","text":"<p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfilterswithtype","title":"fn spec.rules.backendRefs.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersextensionref","title":"obj spec.rules.backendRefs.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n Support: Implementation-specific\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithgroup","title":"fn spec.rules.backendRefs.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithkind","title":"fn spec.rules.backendRefs.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithname","title":"fn spec.rules.backendRefs.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifier","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifieradd","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifierset","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirror","title":"obj spec.rules.backendRefs.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirrorbackendref","title":"obj spec.rules.backendRefs.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirect","title":"obj spec.rules.backendRefs.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithhostname","title":"fn spec.rules.backendRefs.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithport","title":"fn spec.rules.backendRefs.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithscheme","title":"fn spec.rules.backendRefs.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithstatuscode","title":"fn spec.rules.backendRefs.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirectpath","title":"obj spec.rules.backendRefs.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" would be modified to \\\"/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithtype","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifier","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifieradd","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifierset","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersurlrewrite","title":"obj spec.rules.backendRefs.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritewithhostname","title":"fn spec.rules.backendRefs.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersurlrewritepath","title":"obj spec.rules.backendRefs.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" would be modified to \\\"/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithtype","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfilters","title":"obj spec.rules.filters","text":"<p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying a core filter multiple times has unspecified or implementation-specific conformance. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In all cases where incompatible or unsupported filters are specified, implementations MUST add a warning condition to status. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfilterswithtype","title":"fn spec.rules.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersextensionref","title":"obj spec.rules.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n Support: Implementation-specific\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersextensionrefwithgroup","title":"fn spec.rules.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersextensionrefwithkind","title":"fn spec.rules.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersextensionrefwithname","title":"fn spec.rules.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestheadermodifier","title":"obj spec.rules.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithadd","title":"fn spec.rules.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremove","title":"fn spec.rules.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithset","title":"fn spec.rules.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestheadermodifieradd","title":"obj spec.rules.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestheadermodifierset","title":"obj spec.rules.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestmirror","title":"obj spec.rules.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestmirrorbackendref","title":"obj spec.rules.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestredirect","title":"obj spec.rules.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithhostname","title":"fn spec.rules.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithport","title":"fn spec.rules.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithscheme","title":"fn spec.rules.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithstatuscode","title":"fn spec.rules.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestredirectpath","title":"obj spec.rules.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" would be modified to \\\"/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithtype","title":"fn spec.rules.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersresponseheadermodifier","title":"obj spec.rules.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithadd","title":"fn spec.rules.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremove","title":"fn spec.rules.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithset","title":"fn spec.rules.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersresponseheadermodifieradd","title":"obj spec.rules.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersresponseheadermodifierset","title":"obj spec.rules.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersurlrewrite","title":"obj spec.rules.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritewithhostname","title":"fn spec.rules.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesfiltersurlrewritepath","title":"obj spec.rules.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" would be modified to \\\"/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritepathwithtype","title":"fn spec.rules.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesmatches","title":"obj spec.rules.matches","text":"<p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithheaders","title":"fn spec.rules.matches.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithheadersmixin","title":"fn spec.rules.matches.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithmethod","title":"fn spec.rules.matches.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithqueryparams","title":"fn spec.rules.matches.withQueryParams","text":"<pre><code>withQueryParams(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithqueryparamsmixin","title":"fn spec.rules.matches.withQueryParamsMixin","text":"<pre><code>withQueryParamsMixin(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesmatchesheaders","title":"obj spec.rules.matches.headers","text":"<p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatchesheaderswithname","title":"fn spec.rules.matches.headers.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent. \\n When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for \\\"Set-Cookie\\\".\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatchesheaderswithtype","title":"fn spec.rules.matches.headers.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the header. \\n Support: Core (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatchesheaderswithvalue","title":"fn spec.rules.matches.headers.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesmatchespath","title":"obj spec.rules.matches.path","text":"<p>\"Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the \\\"/\\\" path is provided.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatchespathwithtype","title":"fn spec.rules.matches.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the path Value. \\n Support: Core (Exact, PathPrefix) \\n Support: Implementation-specific (RegularExpression)\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatchespathwithvalue","title":"fn spec.rules.matches.path.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the HTTP path to match against.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#obj-specrulesmatchesqueryparams","title":"obj spec.rules.matches.queryParams","text":"<p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatchesqueryparamswithname","title":"fn spec.rules.matches.queryParams.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3). \\n If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored. \\n If a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is recommended that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API. \\n Users SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatchesqueryparamswithtype","title":"fn spec.rules.matches.queryParams.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the query parameter. \\n Support: Extended (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"0.7/gateway/v1beta1/httpRoute/#fn-specrulesmatchesqueryparamswithvalue","title":"fn spec.rules.matches.queryParams.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP query param to be matched.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/","title":"gateway.v1beta1.referenceGrant","text":"<p>\"ReferenceGrant identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy. \\n Each ReferenceGrant can be used to represent a unique trust relationship. Additional Reference Grants can be used to add to the set of trusted sources of inbound references for the namespace they are defined within. \\n All cross-namespace references in Gateway API (with the exception of cross-namespace Gateway-route attachment) require a ReferenceGrant. \\n ReferenceGrant is a form of runtime verification allowing users to assert which cross-namespace object references are permitted. Implementations that support ReferenceGrant MUST NOT permit cross-namespace references which have no grant, and MUST respond to the removal of a grant by revoking the access that the grant allowed. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>fn withFromMixin(from)</code></li> <li><code>fn withTo(to)</code></li> <li><code>fn withToMixin(to)</code></li> <li><code>obj spec.from</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.to</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fields","title":"Fields","text":""},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ReferenceGrant</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of ReferenceGrant.\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-specwithfrom","title":"fn spec.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-specwithfrommixin","title":"fn spec.withFromMixin","text":"<pre><code>withFromMixin(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-specwithto","title":"fn spec.withTo","text":"<pre><code>withTo(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-specwithtomixin","title":"fn spec.withToMixin","text":"<pre><code>withToMixin(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#obj-specfrom","title":"obj spec.from","text":"<p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-specfromwithgroup","title":"fn spec.from.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-specfromwithkind","title":"fn spec.from.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field. \\n When used to permit a SecretObjectReference: \\n * Gateway \\n When used to permit a BackendObjectReference: \\n * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-specfromwithnamespace","title":"fn spec.from.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#obj-specto","title":"obj spec.to","text":"<p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-spectowithgroup","title":"fn spec.to.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-spectowithkind","title":"fn spec.to.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field: \\n * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference\"</p>"},{"location":"0.7/gateway/v1beta1/referenceGrant/#fn-spectowithname","title":"fn spec.to.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.\"</p>"},{"location":"0.8/","title":"gateway-api","text":"<pre><code>local gateway-api = import \"github.com/jsonnet-libs/gateway-api-libsonnet/0.8/main.libsonnet\"\n</code></pre> <ul> <li>gateway</li> </ul>"},{"location":"0.8/gateway/","title":"gateway","text":"<ul> <li>v1alpha2</li> <li>v1beta1</li> </ul>"},{"location":"0.8/gateway/v1alpha2/","title":"gateway.v1alpha2","text":"<ul> <li>gateway</li> <li>gatewayClass</li> <li>httpRoute</li> <li>referenceGrant</li> </ul>"},{"location":"0.8/gateway/v1alpha2/gateway/","title":"gateway.v1alpha2.gateway","text":"<p>\"Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withGatewayClassName(gatewayClassName)</code></li> <li><code>fn withListeners(listeners)</code></li> <li><code>fn withListenersMixin(listeners)</code></li> <li><code>obj spec.addresses</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.listeners</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> <li><code>obj spec.listeners.allowedRoutes</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>obj spec.listeners.allowedRoutes.kinds</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> </ul> </li> <li><code>obj spec.listeners.allowedRoutes.namespaces</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.listeners.tls</code><ul> <li><code>fn withCertificateRefs(certificateRefs)</code></li> <li><code>fn withCertificateRefsMixin(certificateRefs)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>obj spec.listeners.tls.certificateRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.8/gateway/v1alpha2/gateway/#fields","title":"Fields","text":""},{"location":"0.8/gateway/v1alpha2/gateway/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Gateway</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of Gateway.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-specwithgatewayclassname","title":"fn spec.withGatewayClassName","text":"<pre><code>withGatewayClassName(gatewayClassName)\n</code></pre> <p>\"GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-specwithlisteners","title":"fn spec.withListeners","text":"<pre><code>withListeners(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n Within the HTTP Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 80, Protocol: HTTP 2. Port: 443, Protocol: HTTPS \\n Within the TLS Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 443, Protocol: TLS \\n Port and protocol combinations not listed above are considered Extended. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-specwithlistenersmixin","title":"fn spec.withListenersMixin","text":"<pre><code>withListenersMixin(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n Within the HTTP Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 80, Protocol: HTTP 2. Port: 443, Protocol: HTTPS \\n Within the TLS Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 443, Protocol: TLS \\n Port and protocol combinations not listed above are considered Extended. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-specaddresses","title":"obj spec.addresses","text":"<p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-specaddresseswithtype","title":"fn spec.addresses.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of the address.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-specaddresseswithvalue","title":"fn spec.addresses.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the address. The validity of the values will depend on the type and support by the controller. \\n Examples: <code>1.2.3.4</code>, <code>128::1</code>, <code>my-ip-address</code>.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-speclisteners","title":"obj spec.listeners","text":"<p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n Within the HTTP Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 80, Protocol: HTTP 2. Port: 443, Protocol: HTTPS \\n Within the TLS Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 443, Protocol: TLS \\n Port and protocol combinations not listed above are considered Extended. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerswithhostname","title":"fn spec.listeners.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. \\n Implementations MUST apply Hostname matching appropriately for each of the following protocols: \\n * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. \\n For HTTPRoute and TLSRoute resources, there is an interaction with the <code>spec.hostnames</code> array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerswithname","title":"fn spec.listeners.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the Listener. This name MUST be unique within a Gateway. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerswithport","title":"fn spec.listeners.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerswithprotocol","title":"fn spec.listeners.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol specifies the network protocol this listener expects to receive. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-speclistenersallowedroutes","title":"obj spec.listeners.allowedRoutes","text":"<p>\"AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. \\n Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: \\n * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of \\\"2020-09-08 01:02:03\\\" is given precedence over a Route with a creation timestamp of \\\"2020-09-08 01:02:04\\\". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. \\n All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedrouteswithkinds","title":"fn spec.listeners.allowedRoutes.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedrouteswithkindsmixin","title":"fn spec.listeners.allowedRoutes.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-speclistenersallowedrouteskinds","title":"obj spec.listeners.allowedRoutes.kinds","text":"<p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedrouteskindswithgroup","title":"fn spec.listeners.allowedRoutes.kinds.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the Route.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedrouteskindswithkind","title":"fn spec.listeners.allowedRoutes.kinds.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the Route.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-speclistenersallowedroutesnamespaces","title":"obj spec.listeners.allowedRoutes.namespaces","text":"<p>\"Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespaceswithfrom","title":"fn spec.listeners.allowedRoutes.namespaces.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From indicates where Routes will be selected for this Gateway. Possible values are: \\n * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-speclistenersallowedroutesnamespacesselector","title":"obj spec.listeners.allowedRoutes.namespaces.selector","text":"<p>\"Selector must be specified when From is set to \\\"Selector\\\". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of \\\"From\\\". \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressions","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressionsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabels","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabelsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-speclistenersallowedroutesnamespacesselectormatchexpressions","title":"obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithkey","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithoperator","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvalues","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvaluesmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-speclistenerstls","title":"obj spec.listeners.tls","text":"<p>\"TLS is the TLS configuration for the Listener. This field is required if the Protocol field is \\\"HTTPS\\\" or \\\"TLS\\\". It is invalid to set this field if the Protocol field is \\\"HTTP\\\", \\\"TCP\\\", or \\\"UDP\\\". \\n The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. \\n The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerstlswithcertificaterefs","title":"fn spec.listeners.tls.withCertificateRefs","text":"<pre><code>withCertificateRefs(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerstlswithcertificaterefsmixin","title":"fn spec.listeners.tls.withCertificateRefsMixin","text":"<pre><code>withCertificateRefsMixin(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerstlswithmode","title":"fn spec.listeners.tls.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: \\n - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerstlswithoptions","title":"fn spec.listeners.tls.withOptions","text":"<pre><code>withOptions(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerstlswithoptionsmixin","title":"fn spec.listeners.tls.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#obj-speclistenerstlscertificaterefs","title":"obj spec.listeners.tls.certificateRefs","text":"<p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerstlscertificaterefswithgroup","title":"fn spec.listeners.tls.certificateRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerstlscertificaterefswithkind","title":"fn spec.listeners.tls.certificateRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"Secret\\\".\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerstlscertificaterefswithname","title":"fn spec.listeners.tls.certificateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1alpha2/gateway/#fn-speclistenerstlscertificaterefswithnamespace","title":"fn spec.listeners.tls.certificateRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/","title":"gateway.v1alpha2.gatewayClass","text":"<p>\"GatewayClass describes a class of Gateways available to the user for creating Gateway resources. \\n It is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation. \\n Whenever one or more Gateways are using a GatewayClass, implementations SHOULD add the <code>gateway-exists-finalizer.gateway.networking.k8s.io</code> finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use. \\n GatewayClass is a Cluster level resource.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withControllerName(controllerName)</code></li> <li><code>fn withDescription(description)</code></li> <li><code>obj spec.parametersRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fields","title":"Fields","text":""},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of GatewayClass</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of GatewayClass.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-specwithcontrollername","title":"fn spec.withControllerName","text":"<pre><code>withControllerName(controllerName)\n</code></pre> <p>\"ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path. \\n Example: \\\"example.net/gateway-controller\\\". \\n This field is not mutable and cannot be empty. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description helps describe a GatewayClass with more details.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#obj-specparametersref","title":"obj spec.parametersRef","text":"<p>\"ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. \\n ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. \\n If the referent cannot be found, the GatewayClass's \\\"InvalidParameters\\\" status condition will be true. \\n Support: Implementation-specific\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-specparametersrefwithgroup","title":"fn spec.parametersRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-specparametersrefwithkind","title":"fn spec.parametersRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-specparametersrefwithname","title":"fn spec.parametersRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1alpha2/gatewayClass/#fn-specparametersrefwithnamespace","title":"fn spec.parametersRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/","title":"gateway.v1alpha2.httpRoute","text":"<p>\"HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withHostnames(hostnames)</code></li> <li><code>fn withHostnamesMixin(hostnames)</code></li> <li><code>fn withParentRefs(parentRefs)</code></li> <li><code>fn withParentRefsMixin(parentRefs)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>obj spec.parentRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSectionName(sectionName)</code></li> </ul> </li> <li><code>obj spec.rules</code><ul> <li><code>fn withBackendRefs(backendRefs)</code></li> <li><code>fn withBackendRefsMixin(backendRefs)</code></li> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withMatches(matches)</code></li> <li><code>fn withMatchesMixin(matches)</code></li> <li><code>obj spec.rules.backendRefs</code><ul> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.rules.backendRefs.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.backendRefs.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestMirror</code><ul> <li><code>obj spec.rules.backendRefs.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestMirror</code><ul> <li><code>obj spec.rules.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.matches</code><ul> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withQueryParams(queryParams)</code></li> <li><code>fn withQueryParamsMixin(queryParams)</code></li> <li><code>obj spec.rules.matches.headers</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.path</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.queryParams</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fields","title":"Fields","text":""},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HTTPRoute</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of HTTPRoute.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specwithhostnames","title":"fn spec.withHostnames","text":"<pre><code>withHostnames(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specwithhostnamesmixin","title":"fn spec.withHostnamesMixin","text":"<pre><code>withHostnamesMixin(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specwithparentrefs","title":"fn spec.withParentRefs","text":"<pre><code>withParentRefs(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) \\n This API may be extended in the future to support additional kinds of parent resources. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as two separate Listeners on the same Gateway or two separate ports on the same Service. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n ParentRefs from a Route to a Service in the same namespace are \\\"producer\\\" routes, which apply default routing rules to inbound connections from any namespace to the Service. \\n ParentRefs from a Route to a Service in a different namespace are \\\"consumer\\\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \\n \"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specwithparentrefsmixin","title":"fn spec.withParentRefsMixin","text":"<pre><code>withParentRefsMixin(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) \\n This API may be extended in the future to support additional kinds of parent resources. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as two separate Listeners on the same Gateway or two separate ports on the same Service. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n ParentRefs from a Route to a Service in the same namespace are \\\"producer\\\" routes, which apply default routing rules to inbound connections from any namespace to the Service. \\n ParentRefs from a Route to a Service in a different namespace are \\\"consumer\\\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \\n \"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specparentrefs","title":"obj spec.parentRefs","text":"<p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) \\n This API may be extended in the future to support additional kinds of parent resources. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as two separate Listeners on the same Gateway or two separate ports on the same Service. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n ParentRefs from a Route to a Service in the same namespace are \\\"producer\\\" routes, which apply default routing rules to inbound connections from any namespace to the Service. \\n ParentRefs from a Route to a Service in a different namespace are \\\"consumer\\\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \\n \"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specparentrefswithgroup","title":"fn spec.parentRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When unspecified, \\\"gateway.networking.k8s.io\\\" is inferred. To set the core API group (such as for a \\\"Service\\\" kind referent), Group must be explicitly set to \\\"\\\" (empty string). \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specparentrefswithkind","title":"fn spec.parentRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) \\n Support for other resources is Implementation-Specific.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specparentrefswithname","title":"fn spec.parentRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specparentrefswithnamespace","title":"fn spec.parentRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. \\n Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. \\n ParentRefs from a Route to a Service in the same namespace are \\\"producer\\\" routes, which apply default routing rules to inbound connections from any namespace to the Service. \\n ParentRefs from a Route to a Service in a different namespace are \\\"consumer\\\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specparentrefswithsectionname","title":"fn spec.parentRefs.withSectionName","text":"<pre><code>withSectionName(sectionName)\n</code></pre> <p>\"SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \\n * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. \\n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \\n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specruleswithbackendrefs","title":"fn spec.rules.withBackendRefs","text":"<pre><code>withBackendRefs(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specruleswithbackendrefsmixin","title":"fn spec.rules.withBackendRefsMixin","text":"<pre><code>withBackendRefsMixin(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specruleswithfilters","title":"fn spec.rules.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specruleswithfiltersmixin","title":"fn spec.rules.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specruleswithmatches","title":"fn spec.rules.withMatches","text":"<pre><code>withMatches(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specruleswithmatchesmixin","title":"fn spec.rules.withMatchesMixin","text":"<pre><code>withMatchesMixin(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefs","title":"obj spec.rules.backendRefs","text":"<p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithfilters","title":"fn spec.rules.backendRefs.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithfiltersmixin","title":"fn spec.rules.backendRefs.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithgroup","title":"fn spec.rules.backendRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithkind","title":"fn spec.rules.backendRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithname","title":"fn spec.rules.backendRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithnamespace","title":"fn spec.rules.backendRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithport","title":"fn spec.rules.backendRefs.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefswithweight","title":"fn spec.rules.backendRefs.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. \\n If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. \\n Support for this field varies based on the context where used.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfilters","title":"obj spec.rules.backendRefs.filters","text":"<p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfilterswithtype","title":"fn spec.rules.backendRefs.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersextensionref","title":"obj spec.rules.backendRefs.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n This filter can be used multiple times within the same rule. \\n Support: Implementation-specific\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithgroup","title":"fn spec.rules.backendRefs.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithkind","title":"fn spec.rules.backendRefs.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithname","title":"fn spec.rules.backendRefs.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifier","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifieradd","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifierset","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirror","title":"obj spec.rules.backendRefs.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirrorbackendref","title":"obj spec.rules.backendRefs.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirect","title":"obj spec.rules.backendRefs.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithhostname","title":"fn spec.rules.backendRefs.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithport","title":"fn spec.rules.backendRefs.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithscheme","title":"fn spec.rules.backendRefs.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithstatuscode","title":"fn spec.rules.backendRefs.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirectpath","title":"obj spec.rules.backendRefs.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithtype","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifier","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifieradd","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifierset","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersurlrewrite","title":"obj spec.rules.backendRefs.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritewithhostname","title":"fn spec.rules.backendRefs.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesbackendrefsfiltersurlrewritepath","title":"obj spec.rules.backendRefs.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithtype","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfilters","title":"obj spec.rules.filters","text":"<p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfilterswithtype","title":"fn spec.rules.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersextensionref","title":"obj spec.rules.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n This filter can be used multiple times within the same rule. \\n Support: Implementation-specific\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersextensionrefwithgroup","title":"fn spec.rules.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersextensionrefwithkind","title":"fn spec.rules.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersextensionrefwithname","title":"fn spec.rules.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestheadermodifier","title":"obj spec.rules.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithadd","title":"fn spec.rules.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremove","title":"fn spec.rules.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithset","title":"fn spec.rules.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestheadermodifieradd","title":"obj spec.rules.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestheadermodifierset","title":"obj spec.rules.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestmirror","title":"obj spec.rules.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestmirrorbackendref","title":"obj spec.rules.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestredirect","title":"obj spec.rules.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectwithhostname","title":"fn spec.rules.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectwithport","title":"fn spec.rules.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectwithscheme","title":"fn spec.rules.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectwithstatuscode","title":"fn spec.rules.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersrequestredirectpath","title":"obj spec.rules.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersrequestredirectpathwithtype","title":"fn spec.rules.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersresponseheadermodifier","title":"obj spec.rules.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithadd","title":"fn spec.rules.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremove","title":"fn spec.rules.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithset","title":"fn spec.rules.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersresponseheadermodifieradd","title":"obj spec.rules.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersresponseheadermodifierset","title":"obj spec.rules.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersurlrewrite","title":"obj spec.rules.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersurlrewritewithhostname","title":"fn spec.rules.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesfiltersurlrewritepath","title":"obj spec.rules.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesfiltersurlrewritepathwithtype","title":"fn spec.rules.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesmatches","title":"obj spec.rules.matches","text":"<p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatcheswithheaders","title":"fn spec.rules.matches.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatcheswithheadersmixin","title":"fn spec.rules.matches.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatcheswithmethod","title":"fn spec.rules.matches.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatcheswithqueryparams","title":"fn spec.rules.matches.withQueryParams","text":"<pre><code>withQueryParams(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatcheswithqueryparamsmixin","title":"fn spec.rules.matches.withQueryParamsMixin","text":"<pre><code>withQueryParamsMixin(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesmatchesheaders","title":"obj spec.rules.matches.headers","text":"<p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesheaderswithname","title":"fn spec.rules.matches.headers.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent. \\n When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for \\\"Set-Cookie\\\".\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesheaderswithtype","title":"fn spec.rules.matches.headers.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the header. \\n Support: Core (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesheaderswithvalue","title":"fn spec.rules.matches.headers.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesmatchespath","title":"obj spec.rules.matches.path","text":"<p>\"Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the \\\"/\\\" path is provided.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatchespathwithtype","title":"fn spec.rules.matches.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the path Value. \\n Support: Core (Exact, PathPrefix) \\n Support: Implementation-specific (RegularExpression)\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatchespathwithvalue","title":"fn spec.rules.matches.path.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the HTTP path to match against.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#obj-specrulesmatchesqueryparams","title":"obj spec.rules.matches.queryParams","text":"<p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesqueryparamswithname","title":"fn spec.rules.matches.queryParams.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3). \\n If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored. \\n If a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is recommended that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API. \\n Users SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesqueryparamswithtype","title":"fn spec.rules.matches.queryParams.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the query parameter. \\n Support: Extended (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"0.8/gateway/v1alpha2/httpRoute/#fn-specrulesmatchesqueryparamswithvalue","title":"fn spec.rules.matches.queryParams.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP query param to be matched.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/","title":"gateway.v1alpha2.referenceGrant","text":"<p>\"ReferenceGrant identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy. \\n Each ReferenceGrant can be used to represent a unique trust relationship. Additional Reference Grants can be used to add to the set of trusted sources of inbound references for the namespace they are defined within. \\n A ReferenceGrant is required for all cross-namespace references in Gateway API (with the exception of cross-namespace Route-Gateway attachment, which is governed by the AllowedRoutes configuration on the Gateway, and cross-namespace Service ParentRefs on a \\\"consumer\\\" mesh Route, which defines routing rules applicable only to workloads in the Route namespace). ReferenceGrants allowing a reference from a Route to a Service are only applicable to BackendRefs. \\n ReferenceGrant is a form of runtime verification allowing users to assert which cross-namespace object references are permitted. Implementations that support ReferenceGrant MUST NOT permit cross-namespace references which have no grant, and MUST respond to the removal of a grant by revoking the access that the grant allowed.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>fn withFromMixin(from)</code></li> <li><code>fn withTo(to)</code></li> <li><code>fn withToMixin(to)</code></li> <li><code>obj spec.from</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.to</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fields","title":"Fields","text":""},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ReferenceGrant</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of ReferenceGrant.\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-specwithfrom","title":"fn spec.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-specwithfrommixin","title":"fn spec.withFromMixin","text":"<pre><code>withFromMixin(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-specwithto","title":"fn spec.withTo","text":"<pre><code>withTo(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-specwithtomixin","title":"fn spec.withToMixin","text":"<pre><code>withToMixin(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#obj-specfrom","title":"obj spec.from","text":"<p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-specfromwithgroup","title":"fn spec.from.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-specfromwithkind","title":"fn spec.from.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field. \\n When used to permit a SecretObjectReference: \\n * Gateway \\n When used to permit a BackendObjectReference: \\n * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-specfromwithnamespace","title":"fn spec.from.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#obj-specto","title":"obj spec.to","text":"<p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-spectowithgroup","title":"fn spec.to.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-spectowithkind","title":"fn spec.to.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field: \\n * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference\"</p>"},{"location":"0.8/gateway/v1alpha2/referenceGrant/#fn-spectowithname","title":"fn spec.to.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.\"</p>"},{"location":"0.8/gateway/v1beta1/","title":"gateway.v1beta1","text":"<ul> <li>gateway</li> <li>gatewayClass</li> <li>httpRoute</li> <li>referenceGrant</li> </ul>"},{"location":"0.8/gateway/v1beta1/gateway/","title":"gateway.v1beta1.gateway","text":"<p>\"Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withGatewayClassName(gatewayClassName)</code></li> <li><code>fn withListeners(listeners)</code></li> <li><code>fn withListenersMixin(listeners)</code></li> <li><code>obj spec.addresses</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.listeners</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> <li><code>obj spec.listeners.allowedRoutes</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>obj spec.listeners.allowedRoutes.kinds</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> </ul> </li> <li><code>obj spec.listeners.allowedRoutes.namespaces</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.listeners.tls</code><ul> <li><code>fn withCertificateRefs(certificateRefs)</code></li> <li><code>fn withCertificateRefsMixin(certificateRefs)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>obj spec.listeners.tls.certificateRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.8/gateway/v1beta1/gateway/#fields","title":"Fields","text":""},{"location":"0.8/gateway/v1beta1/gateway/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Gateway</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of Gateway.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-specwithgatewayclassname","title":"fn spec.withGatewayClassName","text":"<pre><code>withGatewayClassName(gatewayClassName)\n</code></pre> <p>\"GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-specwithlisteners","title":"fn spec.withListeners","text":"<pre><code>withListeners(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n Within the HTTP Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 80, Protocol: HTTP 2. Port: 443, Protocol: HTTPS \\n Within the TLS Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 443, Protocol: TLS \\n Port and protocol combinations not listed above are considered Extended. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-specwithlistenersmixin","title":"fn spec.withListenersMixin","text":"<pre><code>withListenersMixin(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n Within the HTTP Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 80, Protocol: HTTP 2. Port: 443, Protocol: HTTPS \\n Within the TLS Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 443, Protocol: TLS \\n Port and protocol combinations not listed above are considered Extended. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-specaddresses","title":"obj spec.addresses","text":"<p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-specaddresseswithtype","title":"fn spec.addresses.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of the address.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-specaddresseswithvalue","title":"fn spec.addresses.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the address. The validity of the values will depend on the type and support by the controller. \\n Examples: <code>1.2.3.4</code>, <code>128::1</code>, <code>my-ip-address</code>.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-speclisteners","title":"obj spec.listeners","text":"<p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol. \\n Within the HTTP Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 80, Protocol: HTTP 2. Port: 443, Protocol: HTTPS \\n Within the TLS Conformance Profile, the below combinations of port and protocol are considered Core and MUST be supported: \\n 1. Port: 443, Protocol: TLS \\n Port and protocol combinations not listed above are considered Extended. \\n An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are \\\"compatible\\\". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways. \\n For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met: \\n 1. Either each Listener within the group specifies the \\\"HTTP\\\" Protocol or each Listener within the group specifies either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol. \\n 2. Each Listener within the group specifies a Hostname that is unique within the group. \\n 3. As a special case, one Listener within a group may omit Hostname, in which case this Listener matches when no other Listener matches. \\n If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches. \\n If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a \\\"Conflicted\\\" condition in the Listener status. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerswithhostname","title":"fn spec.listeners.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. \\n Implementations MUST apply Hostname matching appropriately for each of the following protocols: \\n * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. \\n For HTTPRoute and TLSRoute resources, there is an interaction with the <code>spec.hostnames</code> array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerswithname","title":"fn spec.listeners.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the Listener. This name MUST be unique within a Gateway. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerswithport","title":"fn spec.listeners.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerswithprotocol","title":"fn spec.listeners.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol specifies the network protocol this listener expects to receive. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-speclistenersallowedroutes","title":"obj spec.listeners.allowedRoutes","text":"<p>\"AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. \\n Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: \\n * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of \\\"2020-09-08 01:02:03\\\" is given precedence over a Route with a creation timestamp of \\\"2020-09-08 01:02:04\\\". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. \\n All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteswithkinds","title":"fn spec.listeners.allowedRoutes.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteswithkindsmixin","title":"fn spec.listeners.allowedRoutes.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-speclistenersallowedrouteskinds","title":"obj spec.listeners.allowedRoutes.kinds","text":"<p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteskindswithgroup","title":"fn spec.listeners.allowedRoutes.kinds.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the Route.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteskindswithkind","title":"fn spec.listeners.allowedRoutes.kinds.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the Route.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-speclistenersallowedroutesnamespaces","title":"obj spec.listeners.allowedRoutes.namespaces","text":"<p>\"Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespaceswithfrom","title":"fn spec.listeners.allowedRoutes.namespaces.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From indicates where Routes will be selected for this Gateway. Possible values are: \\n * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-speclistenersallowedroutesnamespacesselector","title":"obj spec.listeners.allowedRoutes.namespaces.selector","text":"<p>\"Selector must be specified when From is set to \\\"Selector\\\". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of \\\"From\\\". \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressions","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressionsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabels","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabelsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-speclistenersallowedroutesnamespacesselectormatchexpressions","title":"obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithkey","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithoperator","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvalues","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvaluesmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-speclistenerstls","title":"obj spec.listeners.tls","text":"<p>\"TLS is the TLS configuration for the Listener. This field is required if the Protocol field is \\\"HTTPS\\\" or \\\"TLS\\\". It is invalid to set this field if the Protocol field is \\\"HTTP\\\", \\\"TCP\\\", or \\\"UDP\\\". \\n The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. \\n The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerstlswithcertificaterefs","title":"fn spec.listeners.tls.withCertificateRefs","text":"<pre><code>withCertificateRefs(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerstlswithcertificaterefsmixin","title":"fn spec.listeners.tls.withCertificateRefsMixin","text":"<pre><code>withCertificateRefsMixin(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerstlswithmode","title":"fn spec.listeners.tls.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: \\n - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerstlswithoptions","title":"fn spec.listeners.tls.withOptions","text":"<pre><code>withOptions(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerstlswithoptionsmixin","title":"fn spec.listeners.tls.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gateway/#obj-speclistenerstlscertificaterefs","title":"obj spec.listeners.tls.certificateRefs","text":"<p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithgroup","title":"fn spec.listeners.tls.certificateRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithkind","title":"fn spec.listeners.tls.certificateRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"Secret\\\".\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithname","title":"fn spec.listeners.tls.certificateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithnamespace","title":"fn spec.listeners.tls.certificateRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/","title":"gateway.v1beta1.gatewayClass","text":"<p>\"GatewayClass describes a class of Gateways available to the user for creating Gateway resources. \\n It is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation. \\n Whenever one or more Gateways are using a GatewayClass, implementations SHOULD add the <code>gateway-exists-finalizer.gateway.networking.k8s.io</code> finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use. \\n GatewayClass is a Cluster level resource.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withControllerName(controllerName)</code></li> <li><code>fn withDescription(description)</code></li> <li><code>obj spec.parametersRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fields","title":"Fields","text":""},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of GatewayClass</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of GatewayClass.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-specwithcontrollername","title":"fn spec.withControllerName","text":"<pre><code>withControllerName(controllerName)\n</code></pre> <p>\"ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path. \\n Example: \\\"example.net/gateway-controller\\\". \\n This field is not mutable and cannot be empty. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description helps describe a GatewayClass with more details.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#obj-specparametersref","title":"obj spec.parametersRef","text":"<p>\"ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. \\n ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. \\n If the referent cannot be found, the GatewayClass's \\\"InvalidParameters\\\" status condition will be true. \\n Support: Implementation-specific\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithgroup","title":"fn spec.parametersRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithkind","title":"fn spec.parametersRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithname","title":"fn spec.parametersRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithnamespace","title":"fn spec.parametersRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/","title":"gateway.v1beta1.httpRoute","text":"<p>\"HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withHostnames(hostnames)</code></li> <li><code>fn withHostnamesMixin(hostnames)</code></li> <li><code>fn withParentRefs(parentRefs)</code></li> <li><code>fn withParentRefsMixin(parentRefs)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>obj spec.parentRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSectionName(sectionName)</code></li> </ul> </li> <li><code>obj spec.rules</code><ul> <li><code>fn withBackendRefs(backendRefs)</code></li> <li><code>fn withBackendRefsMixin(backendRefs)</code></li> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withMatches(matches)</code></li> <li><code>fn withMatchesMixin(matches)</code></li> <li><code>obj spec.rules.backendRefs</code><ul> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.rules.backendRefs.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.backendRefs.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestMirror</code><ul> <li><code>obj spec.rules.backendRefs.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestMirror</code><ul> <li><code>obj spec.rules.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.matches</code><ul> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withQueryParams(queryParams)</code></li> <li><code>fn withQueryParamsMixin(queryParams)</code></li> <li><code>obj spec.rules.matches.headers</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.path</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.queryParams</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fields","title":"Fields","text":""},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HTTPRoute</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of HTTPRoute.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specwithhostnames","title":"fn spec.withHostnames","text":"<pre><code>withHostnames(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specwithhostnamesmixin","title":"fn spec.withHostnamesMixin","text":"<pre><code>withHostnamesMixin(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specwithparentrefs","title":"fn spec.withParentRefs","text":"<pre><code>withParentRefs(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) \\n This API may be extended in the future to support additional kinds of parent resources. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as two separate Listeners on the same Gateway or two separate ports on the same Service. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n ParentRefs from a Route to a Service in the same namespace are \\\"producer\\\" routes, which apply default routing rules to inbound connections from any namespace to the Service. \\n ParentRefs from a Route to a Service in a different namespace are \\\"consumer\\\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \\n \"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specwithparentrefsmixin","title":"fn spec.withParentRefsMixin","text":"<pre><code>withParentRefsMixin(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) \\n This API may be extended in the future to support additional kinds of parent resources. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as two separate Listeners on the same Gateway or two separate ports on the same Service. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n ParentRefs from a Route to a Service in the same namespace are \\\"producer\\\" routes, which apply default routing rules to inbound connections from any namespace to the Service. \\n ParentRefs from a Route to a Service in a different namespace are \\\"consumer\\\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \\n \"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specparentrefs","title":"obj spec.parentRefs","text":"<p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) \\n This API may be extended in the future to support additional kinds of parent resources. \\n It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as two separate Listeners on the same Gateway or two separate ports on the same Service. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n ParentRefs from a Route to a Service in the same namespace are \\\"producer\\\" routes, which apply default routing rules to inbound connections from any namespace to the Service. \\n ParentRefs from a Route to a Service in a different namespace are \\\"consumer\\\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \\n \"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specparentrefswithgroup","title":"fn spec.parentRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When unspecified, \\\"gateway.networking.k8s.io\\\" is inferred. To set the core API group (such as for a \\\"Service\\\" kind referent), Group must be explicitly set to \\\"\\\" (empty string). \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specparentrefswithkind","title":"fn spec.parentRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) \\n Support for other resources is Implementation-Specific.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specparentrefswithname","title":"fn spec.parentRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specparentrefswithnamespace","title":"fn spec.parentRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. \\n Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. \\n ParentRefs from a Route to a Service in the same namespace are \\\"producer\\\" routes, which apply default routing rules to inbound connections from any namespace to the Service. \\n ParentRefs from a Route to a Service in a different namespace are \\\"consumer\\\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specparentrefswithsectionname","title":"fn spec.parentRefs.withSectionName","text":"<pre><code>withSectionName(sectionName)\n</code></pre> <p>\"SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \\n * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. \\n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \\n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specruleswithbackendrefs","title":"fn spec.rules.withBackendRefs","text":"<pre><code>withBackendRefs(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specruleswithbackendrefsmixin","title":"fn spec.rules.withBackendRefsMixin","text":"<pre><code>withBackendRefsMixin(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specruleswithfilters","title":"fn spec.rules.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specruleswithfiltersmixin","title":"fn spec.rules.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specruleswithmatches","title":"fn spec.rules.withMatches","text":"<pre><code>withMatches(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specruleswithmatchesmixin","title":"fn spec.rules.withMatchesMixin","text":"<pre><code>withMatchesMixin(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefs","title":"obj spec.rules.backendRefs","text":"<p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithfilters","title":"fn spec.rules.backendRefs.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithfiltersmixin","title":"fn spec.rules.backendRefs.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithgroup","title":"fn spec.rules.backendRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithkind","title":"fn spec.rules.backendRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithname","title":"fn spec.rules.backendRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithnamespace","title":"fn spec.rules.backendRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithport","title":"fn spec.rules.backendRefs.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithweight","title":"fn spec.rules.backendRefs.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. \\n If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. \\n Support for this field varies based on the context where used.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfilters","title":"obj spec.rules.backendRefs.filters","text":"<p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfilterswithtype","title":"fn spec.rules.backendRefs.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersextensionref","title":"obj spec.rules.backendRefs.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n This filter can be used multiple times within the same rule. \\n Support: Implementation-specific\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithgroup","title":"fn spec.rules.backendRefs.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithkind","title":"fn spec.rules.backendRefs.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithname","title":"fn spec.rules.backendRefs.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifier","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifieradd","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifierset","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirror","title":"obj spec.rules.backendRefs.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirrorbackendref","title":"obj spec.rules.backendRefs.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirect","title":"obj spec.rules.backendRefs.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithhostname","title":"fn spec.rules.backendRefs.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithport","title":"fn spec.rules.backendRefs.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithscheme","title":"fn spec.rules.backendRefs.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithstatuscode","title":"fn spec.rules.backendRefs.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirectpath","title":"obj spec.rules.backendRefs.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithtype","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifier","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifieradd","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifierset","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersurlrewrite","title":"obj spec.rules.backendRefs.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritewithhostname","title":"fn spec.rules.backendRefs.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersurlrewritepath","title":"obj spec.rules.backendRefs.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithtype","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfilters","title":"obj spec.rules.filters","text":"<p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfilterswithtype","title":"fn spec.rules.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersextensionref","title":"obj spec.rules.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n This filter can be used multiple times within the same rule. \\n Support: Implementation-specific\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersextensionrefwithgroup","title":"fn spec.rules.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersextensionrefwithkind","title":"fn spec.rules.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersextensionrefwithname","title":"fn spec.rules.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestheadermodifier","title":"obj spec.rules.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithadd","title":"fn spec.rules.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremove","title":"fn spec.rules.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithset","title":"fn spec.rules.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestheadermodifieradd","title":"obj spec.rules.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestheadermodifierset","title":"obj spec.rules.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestmirror","title":"obj spec.rules.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestmirrorbackendref","title":"obj spec.rules.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestredirect","title":"obj spec.rules.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithhostname","title":"fn spec.rules.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithport","title":"fn spec.rules.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithscheme","title":"fn spec.rules.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithstatuscode","title":"fn spec.rules.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestredirectpath","title":"obj spec.rules.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithtype","title":"fn spec.rules.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersresponseheadermodifier","title":"obj spec.rules.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithadd","title":"fn spec.rules.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremove","title":"fn spec.rules.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithset","title":"fn spec.rules.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersresponseheadermodifieradd","title":"obj spec.rules.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersresponseheadermodifierset","title":"obj spec.rules.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersurlrewrite","title":"obj spec.rules.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritewithhostname","title":"fn spec.rules.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesfiltersurlrewritepath","title":"obj spec.rules.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritepathwithtype","title":"fn spec.rules.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesmatches","title":"obj spec.rules.matches","text":"<p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithheaders","title":"fn spec.rules.matches.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithheadersmixin","title":"fn spec.rules.matches.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithmethod","title":"fn spec.rules.matches.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithqueryparams","title":"fn spec.rules.matches.withQueryParams","text":"<pre><code>withQueryParams(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithqueryparamsmixin","title":"fn spec.rules.matches.withQueryParamsMixin","text":"<pre><code>withQueryParamsMixin(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesmatchesheaders","title":"obj spec.rules.matches.headers","text":"<p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatchesheaderswithname","title":"fn spec.rules.matches.headers.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent. \\n When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for \\\"Set-Cookie\\\".\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatchesheaderswithtype","title":"fn spec.rules.matches.headers.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the header. \\n Support: Core (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatchesheaderswithvalue","title":"fn spec.rules.matches.headers.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesmatchespath","title":"obj spec.rules.matches.path","text":"<p>\"Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the \\\"/\\\" path is provided.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatchespathwithtype","title":"fn spec.rules.matches.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the path Value. \\n Support: Core (Exact, PathPrefix) \\n Support: Implementation-specific (RegularExpression)\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatchespathwithvalue","title":"fn spec.rules.matches.path.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the HTTP path to match against.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#obj-specrulesmatchesqueryparams","title":"obj spec.rules.matches.queryParams","text":"<p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatchesqueryparamswithname","title":"fn spec.rules.matches.queryParams.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3). \\n If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored. \\n If a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is recommended that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API. \\n Users SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatchesqueryparamswithtype","title":"fn spec.rules.matches.queryParams.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the query parameter. \\n Support: Extended (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"0.8/gateway/v1beta1/httpRoute/#fn-specrulesmatchesqueryparamswithvalue","title":"fn spec.rules.matches.queryParams.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP query param to be matched.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/","title":"gateway.v1beta1.referenceGrant","text":"<p>\"ReferenceGrant identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy. \\n Each ReferenceGrant can be used to represent a unique trust relationship. Additional Reference Grants can be used to add to the set of trusted sources of inbound references for the namespace they are defined within. \\n All cross-namespace references in Gateway API (with the exception of cross-namespace Gateway-route attachment) require a ReferenceGrant. \\n ReferenceGrant is a form of runtime verification allowing users to assert which cross-namespace object references are permitted. Implementations that support ReferenceGrant MUST NOT permit cross-namespace references which have no grant, and MUST respond to the removal of a grant by revoking the access that the grant allowed.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>fn withFromMixin(from)</code></li> <li><code>fn withTo(to)</code></li> <li><code>fn withToMixin(to)</code></li> <li><code>obj spec.from</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.to</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fields","title":"Fields","text":""},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ReferenceGrant</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of ReferenceGrant.\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-specwithfrom","title":"fn spec.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-specwithfrommixin","title":"fn spec.withFromMixin","text":"<pre><code>withFromMixin(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-specwithto","title":"fn spec.withTo","text":"<pre><code>withTo(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-specwithtomixin","title":"fn spec.withToMixin","text":"<pre><code>withToMixin(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#obj-specfrom","title":"obj spec.from","text":"<p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-specfromwithgroup","title":"fn spec.from.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-specfromwithkind","title":"fn spec.from.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field. \\n When used to permit a SecretObjectReference: \\n * Gateway \\n When used to permit a BackendObjectReference: \\n * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-specfromwithnamespace","title":"fn spec.from.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#obj-specto","title":"obj spec.to","text":"<p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-spectowithgroup","title":"fn spec.to.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-spectowithkind","title":"fn spec.to.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field: \\n * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference\"</p>"},{"location":"0.8/gateway/v1beta1/referenceGrant/#fn-spectowithname","title":"fn spec.to.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.\"</p>"},{"location":"1.0/","title":"gateway-api","text":"<pre><code>local gateway-api = import \"github.com/jsonnet-libs/gateway-api-libsonnet/1.0/main.libsonnet\"\n</code></pre> <ul> <li>gateway</li> </ul>"},{"location":"1.0/gateway/","title":"gateway","text":"<ul> <li>v1</li> <li>v1alpha2</li> <li>v1beta1</li> </ul>"},{"location":"1.0/gateway/v1/","title":"gateway.v1","text":"<ul> <li>gateway</li> <li>gatewayClass</li> <li>httpRoute</li> </ul>"},{"location":"1.0/gateway/v1/gateway/","title":"gateway.v1.gateway","text":"<p>\"Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.\"</p>"},{"location":"1.0/gateway/v1/gateway/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withGatewayClassName(gatewayClassName)</code></li> <li><code>fn withListeners(listeners)</code></li> <li><code>fn withListenersMixin(listeners)</code></li> <li><code>obj spec.addresses</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.listeners</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> <li><code>obj spec.listeners.allowedRoutes</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>obj spec.listeners.allowedRoutes.kinds</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> </ul> </li> <li><code>obj spec.listeners.allowedRoutes.namespaces</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.listeners.tls</code><ul> <li><code>fn withCertificateRefs(certificateRefs)</code></li> <li><code>fn withCertificateRefsMixin(certificateRefs)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>obj spec.listeners.tls.certificateRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.0/gateway/v1/gateway/#fields","title":"Fields","text":""},{"location":"1.0/gateway/v1/gateway/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Gateway</p>"},{"location":"1.0/gateway/v1/gateway/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.0/gateway/v1/gateway/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of Gateway.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#fn-specwithgatewayclassname","title":"fn spec.withGatewayClassName","text":"<pre><code>withGatewayClassName(gatewayClassName)\n</code></pre> <p>\"GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-specwithlisteners","title":"fn spec.withListeners","text":"<pre><code>withListeners(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each Listener in a set of Listeners (for example, in a single Gateway) MUST be distinct, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses \\\"set of Listeners\\\" rather than \\\"Listeners in a single Gateway\\\" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules also apply in that case). \\n Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. \\n Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: \\n HTTP Profile \\n 1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided \\n TLS Profile \\n 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough \\n \\\"Distinct\\\" Listeners have the following property: \\n The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. \\n For example, the following Listener scenarios are distinct: \\n 1. Multiple Listeners with the same Port that all use the \\\"HTTP\\\" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol that all have unique Hostname values. 3. A mixture of \\\"TCP\\\" and \\\"UDP\\\" Protocol Listeners, where no Listener with the same Protocol has the same Port value. \\n Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. \\n When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. \\n When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. \\n Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, <code>\\\"foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>, and <code>\\\"*.example.com\\\"</code> takes precedence over <code>\\\"\\\"</code>. \\n Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, <code>\\\"*.foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. \\n The wildcard character will match any number of characters and dots to the left, however, so <code>\\\"*.example.com\\\"</code> will match both <code>\\\"foo.bar.example.com\\\"</code> and <code>\\\"bar.example.com\\\"</code>. \\n If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the \\\"Conflicted\\\" condition in the Listener Status to \\\"True\\\". \\n Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out all the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. \\n The implementation MUST set a \\\"ListenersNotValid\\\" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. \\n A Gateway's Listeners are considered \\\"compatible\\\" if: \\n 1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. \\n Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. \\n For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. \\n Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for \\\"foo.example.com\\\" and \\\".example.com\\\", a request to \\\"foo.example.com\\\" SHOULD only be routed using routes attached to the \\\"foo.example.com\\\" Listener (and not the \\\".example.com\\\" Listener). This concept is known as \\\"Listener Isolation\\\". Implementations that do not support Listener Isolation MUST clearly document this. \\n Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-specwithlistenersmixin","title":"fn spec.withListenersMixin","text":"<pre><code>withListenersMixin(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each Listener in a set of Listeners (for example, in a single Gateway) MUST be distinct, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses \\\"set of Listeners\\\" rather than \\\"Listeners in a single Gateway\\\" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules also apply in that case). \\n Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. \\n Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: \\n HTTP Profile \\n 1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided \\n TLS Profile \\n 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough \\n \\\"Distinct\\\" Listeners have the following property: \\n The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. \\n For example, the following Listener scenarios are distinct: \\n 1. Multiple Listeners with the same Port that all use the \\\"HTTP\\\" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol that all have unique Hostname values. 3. A mixture of \\\"TCP\\\" and \\\"UDP\\\" Protocol Listeners, where no Listener with the same Protocol has the same Port value. \\n Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. \\n When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. \\n When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. \\n Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, <code>\\\"foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>, and <code>\\\"*.example.com\\\"</code> takes precedence over <code>\\\"\\\"</code>. \\n Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, <code>\\\"*.foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. \\n The wildcard character will match any number of characters and dots to the left, however, so <code>\\\"*.example.com\\\"</code> will match both <code>\\\"foo.bar.example.com\\\"</code> and <code>\\\"bar.example.com\\\"</code>. \\n If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the \\\"Conflicted\\\" condition in the Listener Status to \\\"True\\\". \\n Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out all the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. \\n The implementation MUST set a \\\"ListenersNotValid\\\" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. \\n A Gateway's Listeners are considered \\\"compatible\\\" if: \\n 1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. \\n Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. \\n For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. \\n Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for \\\"foo.example.com\\\" and \\\".example.com\\\", a request to \\\"foo.example.com\\\" SHOULD only be routed using routes attached to the \\\"foo.example.com\\\" Listener (and not the \\\".example.com\\\" Listener). This concept is known as \\\"Listener Isolation\\\". Implementations that do not support Listener Isolation MUST clearly document this. \\n Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#obj-specaddresses","title":"obj spec.addresses","text":"<p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-specaddresseswithtype","title":"fn spec.addresses.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of the address.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-specaddresseswithvalue","title":"fn spec.addresses.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the address. The validity of the values will depend on the type and support by the controller. \\n Examples: <code>1.2.3.4</code>, <code>128::1</code>, <code>my-ip-address</code>.\"</p>"},{"location":"1.0/gateway/v1/gateway/#obj-speclisteners","title":"obj spec.listeners","text":"<p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each Listener in a set of Listeners (for example, in a single Gateway) MUST be distinct, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses \\\"set of Listeners\\\" rather than \\\"Listeners in a single Gateway\\\" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules also apply in that case). \\n Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. \\n Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: \\n HTTP Profile \\n 1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided \\n TLS Profile \\n 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough \\n \\\"Distinct\\\" Listeners have the following property: \\n The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. \\n For example, the following Listener scenarios are distinct: \\n 1. Multiple Listeners with the same Port that all use the \\\"HTTP\\\" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol that all have unique Hostname values. 3. A mixture of \\\"TCP\\\" and \\\"UDP\\\" Protocol Listeners, where no Listener with the same Protocol has the same Port value. \\n Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. \\n When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. \\n When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. \\n Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, <code>\\\"foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>, and <code>\\\"*.example.com\\\"</code> takes precedence over <code>\\\"\\\"</code>. \\n Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, <code>\\\"*.foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. \\n The wildcard character will match any number of characters and dots to the left, however, so <code>\\\"*.example.com\\\"</code> will match both <code>\\\"foo.bar.example.com\\\"</code> and <code>\\\"bar.example.com\\\"</code>. \\n If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the \\\"Conflicted\\\" condition in the Listener Status to \\\"True\\\". \\n Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out all the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. \\n The implementation MUST set a \\\"ListenersNotValid\\\" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. \\n A Gateway's Listeners are considered \\\"compatible\\\" if: \\n 1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. \\n Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. \\n For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. \\n Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for \\\"foo.example.com\\\" and \\\".example.com\\\", a request to \\\"foo.example.com\\\" SHOULD only be routed using routes attached to the \\\"foo.example.com\\\" Listener (and not the \\\".example.com\\\" Listener). This concept is known as \\\"Listener Isolation\\\". Implementations that do not support Listener Isolation MUST clearly document this. \\n Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerswithhostname","title":"fn spec.listeners.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. \\n Implementations MUST apply Hostname matching appropriately for each of the following protocols: \\n * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. \\n For HTTPRoute and TLSRoute resources, there is an interaction with the <code>spec.hostnames</code> array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerswithname","title":"fn spec.listeners.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the Listener. This name MUST be unique within a Gateway. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerswithport","title":"fn spec.listeners.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerswithprotocol","title":"fn spec.listeners.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol specifies the network protocol this listener expects to receive. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#obj-speclistenersallowedroutes","title":"obj spec.listeners.allowedRoutes","text":"<p>\"AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. \\n Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: \\n * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of \\\"2020-09-08 01:02:03\\\" is given precedence over a Route with a creation timestamp of \\\"2020-09-08 01:02:04\\\". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. \\n All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedrouteswithkinds","title":"fn spec.listeners.allowedRoutes.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedrouteswithkindsmixin","title":"fn spec.listeners.allowedRoutes.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#obj-speclistenersallowedrouteskinds","title":"obj spec.listeners.allowedRoutes.kinds","text":"<p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedrouteskindswithgroup","title":"fn spec.listeners.allowedRoutes.kinds.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the Route.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedrouteskindswithkind","title":"fn spec.listeners.allowedRoutes.kinds.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the Route.\"</p>"},{"location":"1.0/gateway/v1/gateway/#obj-speclistenersallowedroutesnamespaces","title":"obj spec.listeners.allowedRoutes.namespaces","text":"<p>\"Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedroutesnamespaceswithfrom","title":"fn spec.listeners.allowedRoutes.namespaces.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From indicates where Routes will be selected for this Gateway. Possible values are: \\n * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#obj-speclistenersallowedroutesnamespacesselector","title":"obj spec.listeners.allowedRoutes.namespaces.selector","text":"<p>\"Selector must be specified when From is set to \\\"Selector\\\". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of \\\"From\\\". \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressions","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressionsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabels","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabelsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#obj-speclistenersallowedroutesnamespacesselectormatchexpressions","title":"obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithkey","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithoperator","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvalues","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvaluesmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#obj-speclistenerstls","title":"obj spec.listeners.tls","text":"<p>\"TLS is the TLS configuration for the Listener. This field is required if the Protocol field is \\\"HTTPS\\\" or \\\"TLS\\\". It is invalid to set this field if the Protocol field is \\\"HTTP\\\", \\\"TCP\\\", or \\\"UDP\\\". \\n The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. \\n The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerstlswithcertificaterefs","title":"fn spec.listeners.tls.withCertificateRefs","text":"<pre><code>withCertificateRefs(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerstlswithcertificaterefsmixin","title":"fn spec.listeners.tls.withCertificateRefsMixin","text":"<pre><code>withCertificateRefsMixin(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerstlswithmode","title":"fn spec.listeners.tls.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: \\n - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerstlswithoptions","title":"fn spec.listeners.tls.withOptions","text":"<pre><code>withOptions(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerstlswithoptionsmixin","title":"fn spec.listeners.tls.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gateway/#obj-speclistenerstlscertificaterefs","title":"obj spec.listeners.tls.certificateRefs","text":"<p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerstlscertificaterefswithgroup","title":"fn spec.listeners.tls.certificateRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerstlscertificaterefswithkind","title":"fn spec.listeners.tls.certificateRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"Secret\\\".\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerstlscertificaterefswithname","title":"fn spec.listeners.tls.certificateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1/gateway/#fn-speclistenerstlscertificaterefswithnamespace","title":"fn spec.listeners.tls.certificateRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referenced object. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/","title":"gateway.v1.gatewayClass","text":"<p>\"GatewayClass describes a class of Gateways available to the user for creating Gateway resources. \\n It is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation. \\n Whenever one or more Gateways are using a GatewayClass, implementations SHOULD add the <code>gateway-exists-finalizer.gateway.networking.k8s.io</code> finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use. \\n GatewayClass is a Cluster level resource.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withControllerName(controllerName)</code></li> <li><code>fn withDescription(description)</code></li> <li><code>obj spec.parametersRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.0/gateway/v1/gatewayClass/#fields","title":"Fields","text":""},{"location":"1.0/gateway/v1/gatewayClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of GatewayClass</p>"},{"location":"1.0/gateway/v1/gatewayClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of GatewayClass.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-specwithcontrollername","title":"fn spec.withControllerName","text":"<pre><code>withControllerName(controllerName)\n</code></pre> <p>\"ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path. \\n Example: \\\"example.net/gateway-controller\\\". \\n This field is not mutable and cannot be empty. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description helps describe a GatewayClass with more details.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#obj-specparametersref","title":"obj spec.parametersRef","text":"<p>\"ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. \\n ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. \\n If the referent cannot be found, the GatewayClass's \\\"InvalidParameters\\\" status condition will be true. \\n Support: Implementation-specific\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-specparametersrefwithgroup","title":"fn spec.parametersRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-specparametersrefwithkind","title":"fn spec.parametersRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-specparametersrefwithname","title":"fn spec.parametersRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1/gatewayClass/#fn-specparametersrefwithnamespace","title":"fn spec.parametersRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/","title":"gateway.v1.httpRoute","text":"<p>\"HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withHostnames(hostnames)</code></li> <li><code>fn withHostnamesMixin(hostnames)</code></li> <li><code>fn withParentRefs(parentRefs)</code></li> <li><code>fn withParentRefsMixin(parentRefs)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>obj spec.parentRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSectionName(sectionName)</code></li> </ul> </li> <li><code>obj spec.rules</code><ul> <li><code>fn withBackendRefs(backendRefs)</code></li> <li><code>fn withBackendRefsMixin(backendRefs)</code></li> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withMatches(matches)</code></li> <li><code>fn withMatchesMixin(matches)</code></li> <li><code>obj spec.rules.backendRefs</code><ul> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.rules.backendRefs.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.backendRefs.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestMirror</code><ul> <li><code>obj spec.rules.backendRefs.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestMirror</code><ul> <li><code>obj spec.rules.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.matches</code><ul> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withQueryParams(queryParams)</code></li> <li><code>fn withQueryParamsMixin(queryParams)</code></li> <li><code>obj spec.rules.matches.headers</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.path</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.queryParams</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.0/gateway/v1/httpRoute/#fields","title":"Fields","text":""},{"location":"1.0/gateway/v1/httpRoute/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HTTPRoute</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of HTTPRoute.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specwithhostnames","title":"fn spec.withHostnames","text":"<pre><code>withHostnames(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specwithhostnamesmixin","title":"fn spec.withHostnamesMixin","text":"<pre><code>withHostnamesMixin(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specwithparentrefs","title":"fn spec.withParentRefs","text":"<pre><code>withParentRefs(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile)  This API may be extended in the future to support additional kinds of parent resources. \\n ParentRefs must be distinct. This means either that: \\n * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by <code>group</code>, <code>kind</code>, <code>namespace</code>, and <code>name</code> must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. \\n Some examples: \\n * If one ParentRef sets <code>sectionName</code>, all ParentRefs referencing the same object must also set <code>sectionName</code>. * If one ParentRef sets <code>port</code>, all ParentRefs referencing the same object must also set <code>port</code>. * If one ParentRef sets <code>sectionName</code> and <code>port</code>, all ParentRefs referencing the same object must also set <code>sectionName</code> and <code>port</code>. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n  \\n \"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specwithparentrefsmixin","title":"fn spec.withParentRefsMixin","text":"<pre><code>withParentRefsMixin(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile)  This API may be extended in the future to support additional kinds of parent resources. \\n ParentRefs must be distinct. This means either that: \\n * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by <code>group</code>, <code>kind</code>, <code>namespace</code>, and <code>name</code> must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. \\n Some examples: \\n * If one ParentRef sets <code>sectionName</code>, all ParentRefs referencing the same object must also set <code>sectionName</code>. * If one ParentRef sets <code>port</code>, all ParentRefs referencing the same object must also set <code>port</code>. * If one ParentRef sets <code>sectionName</code> and <code>port</code>, all ParentRefs referencing the same object must also set <code>sectionName</code> and <code>port</code>. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n  \\n \"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specparentrefs","title":"obj spec.parentRefs","text":"<p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile)  This API may be extended in the future to support additional kinds of parent resources. \\n ParentRefs must be distinct. This means either that: \\n * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by <code>group</code>, <code>kind</code>, <code>namespace</code>, and <code>name</code> must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. \\n Some examples: \\n * If one ParentRef sets <code>sectionName</code>, all ParentRefs referencing the same object must also set <code>sectionName</code>. * If one ParentRef sets <code>port</code>, all ParentRefs referencing the same object must also set <code>port</code>. * If one ParentRef sets <code>sectionName</code> and <code>port</code>, all ParentRefs referencing the same object must also set <code>sectionName</code> and <code>port</code>. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n  \\n \"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specparentrefswithgroup","title":"fn spec.parentRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When unspecified, \\\"gateway.networking.k8s.io\\\" is inferred. To set the core API group (such as for a \\\"Service\\\" kind referent), Group must be explicitly set to \\\"\\\" (empty string). \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specparentrefswithkind","title":"fn spec.parentRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) \\n Support for other resources is Implementation-Specific.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specparentrefswithname","title":"fn spec.parentRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specparentrefswithnamespace","title":"fn spec.parentRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. \\n Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. \\n  \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specparentrefswithsectionname","title":"fn spec.parentRefs.withSectionName","text":"<pre><code>withSectionName(sectionName)\n</code></pre> <p>\"SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \\n * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. \\n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \\n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specruleswithbackendrefs","title":"fn spec.rules.withBackendRefs","text":"<pre><code>withBackendRefs(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specruleswithbackendrefsmixin","title":"fn spec.rules.withBackendRefsMixin","text":"<pre><code>withBackendRefsMixin(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specruleswithfilters","title":"fn spec.rules.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specruleswithfiltersmixin","title":"fn spec.rules.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specruleswithmatches","title":"fn spec.rules.withMatches","text":"<pre><code>withMatches(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specruleswithmatchesmixin","title":"fn spec.rules.withMatchesMixin","text":"<pre><code>withMatchesMixin(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefs","title":"obj spec.rules.backendRefs","text":"<p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefswithfilters","title":"fn spec.rules.backendRefs.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefswithfiltersmixin","title":"fn spec.rules.backendRefs.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefswithgroup","title":"fn spec.rules.backendRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefswithkind","title":"fn spec.rules.backendRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefswithname","title":"fn spec.rules.backendRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefswithnamespace","title":"fn spec.rules.backendRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefswithport","title":"fn spec.rules.backendRefs.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefswithweight","title":"fn spec.rules.backendRefs.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. \\n If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. \\n Support for this field varies based on the context where used.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfilters","title":"obj spec.rules.backendRefs.filters","text":"<p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfilterswithtype","title":"fn spec.rules.backendRefs.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersextensionref","title":"obj spec.rules.backendRefs.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n This filter can be used multiple times within the same rule. \\n Support: Implementation-specific\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithgroup","title":"fn spec.rules.backendRefs.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithkind","title":"fn spec.rules.backendRefs.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithname","title":"fn spec.rules.backendRefs.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifier","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifieradd","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifierset","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirror","title":"obj spec.rules.backendRefs.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirrorbackendref","title":"obj spec.rules.backendRefs.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirect","title":"obj spec.rules.backendRefs.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithhostname","title":"fn spec.rules.backendRefs.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithport","title":"fn spec.rules.backendRefs.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithscheme","title":"fn spec.rules.backendRefs.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithstatuscode","title":"fn spec.rules.backendRefs.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirectpath","title":"obj spec.rules.backendRefs.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithtype","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifier","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifieradd","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifierset","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersurlrewrite","title":"obj spec.rules.backendRefs.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritewithhostname","title":"fn spec.rules.backendRefs.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesbackendrefsfiltersurlrewritepath","title":"obj spec.rules.backendRefs.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithtype","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfilters","title":"obj spec.rules.filters","text":"<p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfilterswithtype","title":"fn spec.rules.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersextensionref","title":"obj spec.rules.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n This filter can be used multiple times within the same rule. \\n Support: Implementation-specific\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersextensionrefwithgroup","title":"fn spec.rules.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersextensionrefwithkind","title":"fn spec.rules.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersextensionrefwithname","title":"fn spec.rules.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersrequestheadermodifier","title":"obj spec.rules.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithadd","title":"fn spec.rules.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremove","title":"fn spec.rules.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithset","title":"fn spec.rules.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersrequestheadermodifieradd","title":"obj spec.rules.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersrequestheadermodifierset","title":"obj spec.rules.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersrequestmirror","title":"obj spec.rules.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersrequestmirrorbackendref","title":"obj spec.rules.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersrequestredirect","title":"obj spec.rules.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestredirectwithhostname","title":"fn spec.rules.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestredirectwithport","title":"fn spec.rules.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestredirectwithscheme","title":"fn spec.rules.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestredirectwithstatuscode","title":"fn spec.rules.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersrequestredirectpath","title":"obj spec.rules.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithtype","title":"fn spec.rules.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersresponseheadermodifier","title":"obj spec.rules.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithadd","title":"fn spec.rules.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremove","title":"fn spec.rules.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithset","title":"fn spec.rules.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersresponseheadermodifieradd","title":"obj spec.rules.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersresponseheadermodifierset","title":"obj spec.rules.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersurlrewrite","title":"obj spec.rules.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersurlrewritewithhostname","title":"fn spec.rules.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesfiltersurlrewritepath","title":"obj spec.rules.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesfiltersurlrewritepathwithtype","title":"fn spec.rules.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesmatches","title":"obj spec.rules.matches","text":"<p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatcheswithheaders","title":"fn spec.rules.matches.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatcheswithheadersmixin","title":"fn spec.rules.matches.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatcheswithmethod","title":"fn spec.rules.matches.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatcheswithqueryparams","title":"fn spec.rules.matches.withQueryParams","text":"<pre><code>withQueryParams(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatcheswithqueryparamsmixin","title":"fn spec.rules.matches.withQueryParamsMixin","text":"<pre><code>withQueryParamsMixin(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesmatchesheaders","title":"obj spec.rules.matches.headers","text":"<p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatchesheaderswithname","title":"fn spec.rules.matches.headers.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent. \\n When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for \\\"Set-Cookie\\\".\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatchesheaderswithtype","title":"fn spec.rules.matches.headers.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the header. \\n Support: Core (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatchesheaderswithvalue","title":"fn spec.rules.matches.headers.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesmatchespath","title":"obj spec.rules.matches.path","text":"<p>\"Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the \\\"/\\\" path is provided.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatchespathwithtype","title":"fn spec.rules.matches.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the path Value. \\n Support: Core (Exact, PathPrefix) \\n Support: Implementation-specific (RegularExpression)\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatchespathwithvalue","title":"fn spec.rules.matches.path.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the HTTP path to match against.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#obj-specrulesmatchesqueryparams","title":"obj spec.rules.matches.queryParams","text":"<p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatchesqueryparamswithname","title":"fn spec.rules.matches.queryParams.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3). \\n If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored. \\n If a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is recommended that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API. \\n Users SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatchesqueryparamswithtype","title":"fn spec.rules.matches.queryParams.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the query parameter. \\n Support: Extended (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"1.0/gateway/v1/httpRoute/#fn-specrulesmatchesqueryparamswithvalue","title":"fn spec.rules.matches.queryParams.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP query param to be matched.\"</p>"},{"location":"1.0/gateway/v1alpha2/","title":"gateway.v1alpha2","text":"<ul> <li>referenceGrant</li> </ul>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/","title":"gateway.v1alpha2.referenceGrant","text":"<p>\"ReferenceGrant identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy. \\n Each ReferenceGrant can be used to represent a unique trust relationship. Additional Reference Grants can be used to add to the set of trusted sources of inbound references for the namespace they are defined within. \\n A ReferenceGrant is required for all cross-namespace references in Gateway API (with the exception of cross-namespace Route-Gateway attachment, which is governed by the AllowedRoutes configuration on the Gateway, and cross-namespace Service ParentRefs on a \\\"consumer\\\" mesh Route, which defines routing rules applicable only to workloads in the Route namespace). ReferenceGrants allowing a reference from a Route to a Service are only applicable to BackendRefs. \\n ReferenceGrant is a form of runtime verification allowing users to assert which cross-namespace object references are permitted. Implementations that support ReferenceGrant MUST NOT permit cross-namespace references which have no grant, and MUST respond to the removal of a grant by revoking the access that the grant allowed.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>fn withFromMixin(from)</code></li> <li><code>fn withTo(to)</code></li> <li><code>fn withToMixin(to)</code></li> <li><code>obj spec.from</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.to</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fields","title":"Fields","text":""},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ReferenceGrant</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of ReferenceGrant.\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-specwithfrom","title":"fn spec.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-specwithfrommixin","title":"fn spec.withFromMixin","text":"<pre><code>withFromMixin(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-specwithto","title":"fn spec.withTo","text":"<pre><code>withTo(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-specwithtomixin","title":"fn spec.withToMixin","text":"<pre><code>withToMixin(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#obj-specfrom","title":"obj spec.from","text":"<p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-specfromwithgroup","title":"fn spec.from.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-specfromwithkind","title":"fn spec.from.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field. \\n When used to permit a SecretObjectReference: \\n * Gateway \\n When used to permit a BackendObjectReference: \\n * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-specfromwithnamespace","title":"fn spec.from.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#obj-specto","title":"obj spec.to","text":"<p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-spectowithgroup","title":"fn spec.to.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-spectowithkind","title":"fn spec.to.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field: \\n * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference\"</p>"},{"location":"1.0/gateway/v1alpha2/referenceGrant/#fn-spectowithname","title":"fn spec.to.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.\"</p>"},{"location":"1.0/gateway/v1beta1/","title":"gateway.v1beta1","text":"<ul> <li>gateway</li> <li>gatewayClass</li> <li>httpRoute</li> <li>referenceGrant</li> </ul>"},{"location":"1.0/gateway/v1beta1/gateway/","title":"gateway.v1beta1.gateway","text":"<p>\"Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withGatewayClassName(gatewayClassName)</code></li> <li><code>fn withListeners(listeners)</code></li> <li><code>fn withListenersMixin(listeners)</code></li> <li><code>obj spec.addresses</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.listeners</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> <li><code>obj spec.listeners.allowedRoutes</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>obj spec.listeners.allowedRoutes.kinds</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> </ul> </li> <li><code>obj spec.listeners.allowedRoutes.namespaces</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.listeners.tls</code><ul> <li><code>fn withCertificateRefs(certificateRefs)</code></li> <li><code>fn withCertificateRefsMixin(certificateRefs)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>obj spec.listeners.tls.certificateRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.0/gateway/v1beta1/gateway/#fields","title":"Fields","text":""},{"location":"1.0/gateway/v1beta1/gateway/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Gateway</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of Gateway.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-specwithgatewayclassname","title":"fn spec.withGatewayClassName","text":"<pre><code>withGatewayClassName(gatewayClassName)\n</code></pre> <p>\"GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-specwithlisteners","title":"fn spec.withListeners","text":"<pre><code>withListeners(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each Listener in a set of Listeners (for example, in a single Gateway) MUST be distinct, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses \\\"set of Listeners\\\" rather than \\\"Listeners in a single Gateway\\\" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules also apply in that case). \\n Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. \\n Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: \\n HTTP Profile \\n 1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided \\n TLS Profile \\n 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough \\n \\\"Distinct\\\" Listeners have the following property: \\n The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. \\n For example, the following Listener scenarios are distinct: \\n 1. Multiple Listeners with the same Port that all use the \\\"HTTP\\\" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol that all have unique Hostname values. 3. A mixture of \\\"TCP\\\" and \\\"UDP\\\" Protocol Listeners, where no Listener with the same Protocol has the same Port value. \\n Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. \\n When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. \\n When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. \\n Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, <code>\\\"foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>, and <code>\\\"*.example.com\\\"</code> takes precedence over <code>\\\"\\\"</code>. \\n Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, <code>\\\"*.foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. \\n The wildcard character will match any number of characters and dots to the left, however, so <code>\\\"*.example.com\\\"</code> will match both <code>\\\"foo.bar.example.com\\\"</code> and <code>\\\"bar.example.com\\\"</code>. \\n If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the \\\"Conflicted\\\" condition in the Listener Status to \\\"True\\\". \\n Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out all the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. \\n The implementation MUST set a \\\"ListenersNotValid\\\" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. \\n A Gateway's Listeners are considered \\\"compatible\\\" if: \\n 1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. \\n Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. \\n For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. \\n Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for \\\"foo.example.com\\\" and \\\".example.com\\\", a request to \\\"foo.example.com\\\" SHOULD only be routed using routes attached to the \\\"foo.example.com\\\" Listener (and not the \\\".example.com\\\" Listener). This concept is known as \\\"Listener Isolation\\\". Implementations that do not support Listener Isolation MUST clearly document this. \\n Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-specwithlistenersmixin","title":"fn spec.withListenersMixin","text":"<pre><code>withListenersMixin(listeners)\n</code></pre> <p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each Listener in a set of Listeners (for example, in a single Gateway) MUST be distinct, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses \\\"set of Listeners\\\" rather than \\\"Listeners in a single Gateway\\\" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules also apply in that case). \\n Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. \\n Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: \\n HTTP Profile \\n 1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided \\n TLS Profile \\n 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough \\n \\\"Distinct\\\" Listeners have the following property: \\n The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. \\n For example, the following Listener scenarios are distinct: \\n 1. Multiple Listeners with the same Port that all use the \\\"HTTP\\\" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol that all have unique Hostname values. 3. A mixture of \\\"TCP\\\" and \\\"UDP\\\" Protocol Listeners, where no Listener with the same Protocol has the same Port value. \\n Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. \\n When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. \\n When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. \\n Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, <code>\\\"foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>, and <code>\\\"*.example.com\\\"</code> takes precedence over <code>\\\"\\\"</code>. \\n Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, <code>\\\"*.foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. \\n The wildcard character will match any number of characters and dots to the left, however, so <code>\\\"*.example.com\\\"</code> will match both <code>\\\"foo.bar.example.com\\\"</code> and <code>\\\"bar.example.com\\\"</code>. \\n If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the \\\"Conflicted\\\" condition in the Listener Status to \\\"True\\\". \\n Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out all the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. \\n The implementation MUST set a \\\"ListenersNotValid\\\" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. \\n A Gateway's Listeners are considered \\\"compatible\\\" if: \\n 1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. \\n Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. \\n For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. \\n Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for \\\"foo.example.com\\\" and \\\".example.com\\\", a request to \\\"foo.example.com\\\" SHOULD only be routed using routes attached to the \\\"foo.example.com\\\" Listener (and not the \\\".example.com\\\" Listener). This concept is known as \\\"Listener Isolation\\\". Implementations that do not support Listener Isolation MUST clearly document this. \\n Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-specaddresses","title":"obj spec.addresses","text":"<p>\"Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. \\n The Addresses field represents a request for the address(es) on the \\\"outside of the Gateway\\\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. \\n If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. \\n The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. \\n Support: Extended \\n \"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-specaddresseswithtype","title":"fn spec.addresses.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of the address.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-specaddresseswithvalue","title":"fn spec.addresses.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the address. The validity of the values will depend on the type and support by the controller. \\n Examples: <code>1.2.3.4</code>, <code>128::1</code>, <code>my-ip-address</code>.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-speclisteners","title":"obj spec.listeners","text":"<p>\"Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. \\n Each Listener in a set of Listeners (for example, in a single Gateway) MUST be distinct, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses \\\"set of Listeners\\\" rather than \\\"Listeners in a single Gateway\\\" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules also apply in that case). \\n Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. \\n Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: \\n HTTP Profile \\n 1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided \\n TLS Profile \\n 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough \\n \\\"Distinct\\\" Listeners have the following property: \\n The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. \\n For example, the following Listener scenarios are distinct: \\n 1. Multiple Listeners with the same Port that all use the \\\"HTTP\\\" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the \\\"HTTPS\\\" or \\\"TLS\\\" Protocol that all have unique Hostname values. 3. A mixture of \\\"TCP\\\" and \\\"UDP\\\" Protocol Listeners, where no Listener with the same Protocol has the same Port value. \\n Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. \\n When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. \\n When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. \\n Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, <code>\\\"foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>, and <code>\\\"*.example.com\\\"</code> takes precedence over <code>\\\"\\\"</code>. \\n Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, <code>\\\"*.foo.example.com\\\"</code> takes precedence over <code>\\\"*.example.com\\\"</code>. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. \\n The wildcard character will match any number of characters and dots to the left, however, so <code>\\\"*.example.com\\\"</code> will match both <code>\\\"foo.bar.example.com\\\"</code> and <code>\\\"bar.example.com\\\"</code>. \\n If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the \\\"Conflicted\\\" condition in the Listener Status to \\\"True\\\". \\n Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out all the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. \\n The implementation MUST set a \\\"ListenersNotValid\\\" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. \\n A Gateway's Listeners are considered \\\"compatible\\\" if: \\n 1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. \\n Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. \\n For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. \\n Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for \\\"foo.example.com\\\" and \\\".example.com\\\", a request to \\\"foo.example.com\\\" SHOULD only be routed using routes attached to the \\\"foo.example.com\\\" Listener (and not the \\\".example.com\\\" Listener). This concept is known as \\\"Listener Isolation\\\". Implementations that do not support Listener Isolation MUST clearly document this. \\n Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerswithhostname","title":"fn spec.listeners.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. \\n Implementations MUST apply Hostname matching appropriately for each of the following protocols: \\n * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. \\n For HTTPRoute and TLSRoute resources, there is an interaction with the <code>spec.hostnames</code> array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerswithname","title":"fn spec.listeners.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the Listener. This name MUST be unique within a Gateway. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerswithport","title":"fn spec.listeners.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerswithprotocol","title":"fn spec.listeners.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre> <p>\"Protocol specifies the network protocol this listener expects to receive. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-speclistenersallowedroutes","title":"obj spec.listeners.allowedRoutes","text":"<p>\"AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. \\n Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: \\n * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of \\\"2020-09-08 01:02:03\\\" is given precedence over a Route with a creation timestamp of \\\"2020-09-08 01:02:04\\\". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. \\n All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteswithkinds","title":"fn spec.listeners.allowedRoutes.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteswithkindsmixin","title":"fn spec.listeners.allowedRoutes.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-speclistenersallowedrouteskinds","title":"obj spec.listeners.allowedRoutes.kinds","text":"<p>\"Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. \\n A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \\\"ResolvedRefs\\\" condition to False for this Listener with the \\\"InvalidRouteKinds\\\" reason. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteskindswithgroup","title":"fn spec.listeners.allowedRoutes.kinds.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the Route.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedrouteskindswithkind","title":"fn spec.listeners.allowedRoutes.kinds.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the Route.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-speclistenersallowedroutesnamespaces","title":"obj spec.listeners.allowedRoutes.namespaces","text":"<p>\"Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespaceswithfrom","title":"fn spec.listeners.allowedRoutes.namespaces.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From indicates where Routes will be selected for this Gateway. Possible values are: \\n * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-speclistenersallowedroutesnamespacesselector","title":"obj spec.listeners.allowedRoutes.namespaces.selector","text":"<p>\"Selector must be specified when From is set to \\\"Selector\\\". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of \\\"From\\\". \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressions","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchexpressionsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabels","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectorwithmatchlabelsmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-speclistenersallowedroutesnamespacesselectormatchexpressions","title":"obj spec.listeners.allowedRoutes.namespaces.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithkey","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithoperator","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvalues","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenersallowedroutesnamespacesselectormatchexpressionswithvaluesmixin","title":"fn spec.listeners.allowedRoutes.namespaces.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-speclistenerstls","title":"obj spec.listeners.tls","text":"<p>\"TLS is the TLS configuration for the Listener. This field is required if the Protocol field is \\\"HTTPS\\\" or \\\"TLS\\\". It is invalid to set this field if the Protocol field is \\\"HTTP\\\", \\\"TCP\\\", or \\\"UDP\\\". \\n The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. \\n The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerstlswithcertificaterefs","title":"fn spec.listeners.tls.withCertificateRefs","text":"<pre><code>withCertificateRefs(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerstlswithcertificaterefsmixin","title":"fn spec.listeners.tls.withCertificateRefsMixin","text":"<pre><code>withCertificateRefsMixin(certificateRefs)\n</code></pre> <p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerstlswithmode","title":"fn spec.listeners.tls.withMode","text":"<pre><code>withMode(mode)\n</code></pre> <p>\"Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: \\n - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerstlswithoptions","title":"fn spec.listeners.tls.withOptions","text":"<pre><code>withOptions(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerstlswithoptionsmixin","title":"fn spec.listeners.tls.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>\"Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. \\n A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as <code>example.com/my-custom-option</code>. Un-prefixed names are reserved for key names defined by Gateway API. \\n Support: Implementation-specific\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gateway/#obj-speclistenerstlscertificaterefs","title":"obj spec.listeners.tls.certificateRefs","text":"<p>\"CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. \\n A single CertificateRef to a Kubernetes Secret has \\\"Core\\\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. \\n References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \\\"ResolvedRefs\\\" condition MUST be set to False for this listener with the \\\"RefNotPermitted\\\" reason. \\n This field is required to have at least one element when the mode is set to \\\"Terminate\\\" (default) and is optional otherwise. \\n CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. \\n Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls \\n Support: Implementation-specific (More than one reference or other resource types)\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithgroup","title":"fn spec.listeners.tls.certificateRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithkind","title":"fn spec.listeners.tls.certificateRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"Secret\\\".\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithname","title":"fn spec.listeners.tls.certificateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1beta1/gateway/#fn-speclistenerstlscertificaterefswithnamespace","title":"fn spec.listeners.tls.certificateRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referenced object. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/","title":"gateway.v1beta1.gatewayClass","text":"<p>\"GatewayClass describes a class of Gateways available to the user for creating Gateway resources. \\n It is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation. \\n Whenever one or more Gateways are using a GatewayClass, implementations SHOULD add the <code>gateway-exists-finalizer.gateway.networking.k8s.io</code> finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use. \\n GatewayClass is a Cluster level resource.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withControllerName(controllerName)</code></li> <li><code>fn withDescription(description)</code></li> <li><code>obj spec.parametersRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fields","title":"Fields","text":""},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of GatewayClass</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of GatewayClass.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-specwithcontrollername","title":"fn spec.withControllerName","text":"<pre><code>withControllerName(controllerName)\n</code></pre> <p>\"ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path. \\n Example: \\\"example.net/gateway-controller\\\". \\n This field is not mutable and cannot be empty. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-specwithdescription","title":"fn spec.withDescription","text":"<pre><code>withDescription(description)\n</code></pre> <p>\"Description helps describe a GatewayClass with more details.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#obj-specparametersref","title":"obj spec.parametersRef","text":"<p>\"ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. \\n ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. \\n If the referent cannot be found, the GatewayClass's \\\"InvalidParameters\\\" status condition will be true. \\n Support: Implementation-specific\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithgroup","title":"fn spec.parametersRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithkind","title":"fn spec.parametersRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithname","title":"fn spec.parametersRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1beta1/gatewayClass/#fn-specparametersrefwithnamespace","title":"fn spec.parametersRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/","title":"gateway.v1beta1.httpRoute","text":"<p>\"HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withHostnames(hostnames)</code></li> <li><code>fn withHostnamesMixin(hostnames)</code></li> <li><code>fn withParentRefs(parentRefs)</code></li> <li><code>fn withParentRefsMixin(parentRefs)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>obj spec.parentRefs</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSectionName(sectionName)</code></li> </ul> </li> <li><code>obj spec.rules</code><ul> <li><code>fn withBackendRefs(backendRefs)</code></li> <li><code>fn withBackendRefsMixin(backendRefs)</code></li> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withMatches(matches)</code></li> <li><code>fn withMatchesMixin(matches)</code></li> <li><code>obj spec.rules.backendRefs</code><ul> <li><code>fn withFilters(filters)</code></li> <li><code>fn withFiltersMixin(filters)</code></li> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.rules.backendRefs.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.backendRefs.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestMirror</code><ul> <li><code>obj spec.rules.backendRefs.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.backendRefs.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.backendRefs.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.filters.extensionRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.requestHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.requestHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestMirror</code><ul> <li><code>obj spec.rules.filters.requestMirror.backendRef</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.requestRedirect</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>fn withStatusCode(statusCode)</code></li> <li><code>obj spec.rules.filters.requestRedirect.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withRemove(remove)</code></li> <li><code>fn withRemoveMixin(remove)</code></li> <li><code>fn withSet(set)</code></li> <li><code>fn withSetMixin(set)</code></li> <li><code>obj spec.rules.filters.responseHeaderModifier.add</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.filters.responseHeaderModifier.set</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.filters.urlRewrite</code><ul> <li><code>fn withHostname(hostname)</code></li> <li><code>obj spec.rules.filters.urlRewrite.path</code><ul> <li><code>fn withReplaceFullPath(replaceFullPath)</code></li> <li><code>fn withReplacePrefixMatch(replacePrefixMatch)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.matches</code><ul> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withQueryParams(queryParams)</code></li> <li><code>fn withQueryParamsMixin(queryParams)</code></li> <li><code>obj spec.rules.matches.headers</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.path</code><ul> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.matches.queryParams</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fields","title":"Fields","text":""},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HTTPRoute</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of HTTPRoute.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specwithhostnames","title":"fn spec.withHostnames","text":"<pre><code>withHostnames(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specwithhostnamesmixin","title":"fn spec.withHostnamesMixin","text":"<pre><code>withHostnamesMixin(hostnames)\n</code></pre> <p>\"Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. \\n Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: \\n 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (<code>*.</code>). The wildcard label must appear by itself as the first label. \\n If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: \\n * A Listener with <code>test.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of <code>test.example.com</code> or <code>*.example.com</code>. * A Listener with <code>*.example.com</code> as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, <code>*.example.com</code>, <code>test.example.com</code>, and <code>foo.test.example.com</code> would all match. On the other hand, <code>example.com</code> and <code>test.example.net</code> would not match. \\n Hostnames that are prefixed with a wildcard label (<code>*.</code>) are interpreted as a suffix match. That means that a match for <code>*.example.com</code> would match both <code>test.example.com</code>, and <code>foo.test.example.com</code>, but not <code>example.com</code>. \\n If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified <code>*.example.com</code>, and the HTTPRoute specified <code>test.example.com</code> and <code>test.example.net</code>, <code>test.example.net</code> must not be considered for a match. \\n If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of <code>False</code> in the corresponding RouteParentStatus. \\n In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: \\n * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. \\n If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specwithparentrefs","title":"fn spec.withParentRefs","text":"<pre><code>withParentRefs(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile)  This API may be extended in the future to support additional kinds of parent resources. \\n ParentRefs must be distinct. This means either that: \\n * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by <code>group</code>, <code>kind</code>, <code>namespace</code>, and <code>name</code> must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. \\n Some examples: \\n * If one ParentRef sets <code>sectionName</code>, all ParentRefs referencing the same object must also set <code>sectionName</code>. * If one ParentRef sets <code>port</code>, all ParentRefs referencing the same object must also set <code>port</code>. * If one ParentRef sets <code>sectionName</code> and <code>port</code>, all ParentRefs referencing the same object must also set <code>sectionName</code> and <code>port</code>. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n  \\n \"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specwithparentrefsmixin","title":"fn spec.withParentRefsMixin","text":"<pre><code>withParentRefsMixin(parentRefs)\n</code></pre> <p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile)  This API may be extended in the future to support additional kinds of parent resources. \\n ParentRefs must be distinct. This means either that: \\n * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by <code>group</code>, <code>kind</code>, <code>namespace</code>, and <code>name</code> must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. \\n Some examples: \\n * If one ParentRef sets <code>sectionName</code>, all ParentRefs referencing the same object must also set <code>sectionName</code>. * If one ParentRef sets <code>port</code>, all ParentRefs referencing the same object must also set <code>port</code>. * If one ParentRef sets <code>sectionName</code> and <code>port</code>, all ParentRefs referencing the same object must also set <code>sectionName</code> and <code>port</code>. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n  \\n \"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules are a list of HTTP matchers, filters and actions.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specparentrefs","title":"obj spec.parentRefs","text":"<p>\"ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \\\"producer\\\" route, or the mesh implementation must support and allow \\\"consumer\\\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \\\"producer\\\" route for a Service in a different namespace from the Route. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile)  This API may be extended in the future to support additional kinds of parent resources. \\n ParentRefs must be distinct. This means either that: \\n * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by <code>group</code>, <code>kind</code>, <code>namespace</code>, and <code>name</code> must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. \\n Some examples: \\n * If one ParentRef sets <code>sectionName</code>, all ParentRefs referencing the same object must also set <code>sectionName</code>. * If one ParentRef sets <code>port</code>, all ParentRefs referencing the same object must also set <code>port</code>. * If one ParentRef sets <code>sectionName</code> and <code>port</code>, all ParentRefs referencing the same object must also set <code>sectionName</code> and <code>port</code>. \\n It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. \\n Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. \\n  \\n \"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specparentrefswithgroup","title":"fn spec.parentRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When unspecified, \\\"gateway.networking.k8s.io\\\" is inferred. To set the core API group (such as for a \\\"Service\\\" kind referent), Group must be explicitly set to \\\"\\\" (empty string). \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specparentrefswithkind","title":"fn spec.parentRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. \\n There are two kinds of parent resources with \\\"Core\\\" support: \\n * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) \\n Support for other resources is Implementation-Specific.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specparentrefswithname","title":"fn spec.parentRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specparentrefswithnamespace","title":"fn spec.parentRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. \\n Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. \\n  \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specparentrefswithsectionname","title":"fn spec.parentRefs.withSectionName","text":"<pre><code>withSectionName(sectionName)\n</code></pre> <p>\"SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \\n * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. \\n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \\n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules are a list of HTTP matchers, filters and actions.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specruleswithbackendrefs","title":"fn spec.rules.withBackendRefs","text":"<pre><code>withBackendRefs(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specruleswithbackendrefsmixin","title":"fn spec.rules.withBackendRefsMixin","text":"<pre><code>withBackendRefsMixin(backendRefs)\n</code></pre> <p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specruleswithfilters","title":"fn spec.rules.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specruleswithfiltersmixin","title":"fn spec.rules.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specruleswithmatches","title":"fn spec.rules.withMatches","text":"<pre><code>withMatches(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specruleswithmatchesmixin","title":"fn spec.rules.withMatchesMixin","text":"<pre><code>withMatchesMixin(matches)\n</code></pre> <p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefs","title":"obj spec.rules.backendRefs","text":"<p>\"BackendRefs defines the backend(s) where matching requests should be sent. \\n Failure behavior here depends on how many BackendRefs are specified and how many are invalid. \\n If all entries in BackendRefs are invalid, and there are also no filters specified in this route rule, all traffic which matches this rule MUST receive a 500 status code. \\n See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. \\n When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. \\n For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. \\n Support: Core for Kubernetes Service \\n Support: Extended for Kubernetes ServiceImport \\n Support: Implementation-specific for any other resource \\n Support for weight: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithfilters","title":"fn spec.rules.backendRefs.withFilters","text":"<pre><code>withFilters(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithfiltersmixin","title":"fn spec.rules.backendRefs.withFiltersMixin","text":"<pre><code>withFiltersMixin(filters)\n</code></pre> <p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithgroup","title":"fn spec.rules.backendRefs.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithkind","title":"fn spec.rules.backendRefs.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithname","title":"fn spec.rules.backendRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithnamespace","title":"fn spec.rules.backendRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithport","title":"fn spec.rules.backendRefs.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefswithweight","title":"fn spec.rules.backendRefs.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. \\n If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. \\n Support for this field varies based on the context where used.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfilters","title":"obj spec.rules.backendRefs.filters","text":"<p>\"Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. \\n Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfilterswithtype","title":"fn spec.rules.backendRefs.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersextensionref","title":"obj spec.rules.backendRefs.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n This filter can be used multiple times within the same rule. \\n Support: Implementation-specific\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithgroup","title":"fn spec.rules.backendRefs.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithkind","title":"fn spec.rules.backendRefs.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersextensionrefwithname","title":"fn spec.rules.backendRefs.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifier","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifieradd","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestheadermodifierset","title":"obj spec.rules.backendRefs.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirror","title":"obj spec.rules.backendRefs.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestmirrorbackendref","title":"obj spec.rules.backendRefs.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.backendRefs.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirect","title":"obj spec.rules.backendRefs.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithhostname","title":"fn spec.rules.backendRefs.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithport","title":"fn spec.rules.backendRefs.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithscheme","title":"fn spec.rules.backendRefs.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectwithstatuscode","title":"fn spec.rules.backendRefs.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersrequestredirectpath","title":"obj spec.rules.backendRefs.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersrequestredirectpathwithtype","title":"fn spec.rules.backendRefs.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifier","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithadd","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremove","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithset","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifieradd","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersresponseheadermodifierset","title":"obj spec.rules.backendRefs.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.backendRefs.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersurlrewrite","title":"obj spec.rules.backendRefs.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritewithhostname","title":"fn spec.rules.backendRefs.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesbackendrefsfiltersurlrewritepath","title":"obj spec.rules.backendRefs.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesbackendrefsfiltersurlrewritepathwithtype","title":"fn spec.rules.backendRefs.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfilters","title":"obj spec.rules.filters","text":"<p>\"Filters define the filters that are applied to requests that match this rule. \\n The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. \\n Conformance-levels at this level are defined based on the type of filter: \\n - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. \\n Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. \\n All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the <code>Accepted</code> condition to be set to status <code>False</code>, implementations may use the <code>IncompatibleFilters</code> reason to specify this configuration error. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfilterswithtype","title":"fn spec.rules.filters.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: \\n - Core: Filter types and their corresponding configuration defined by \\\"Support: Core\\\" in this package, e.g. \\\"RequestHeaderModifier\\\". All implementations must support core filters. \\n - Extended: Filter types and their corresponding configuration defined by \\\"Support: Extended\\\" in this package, e.g. \\\"RequestMirror\\\". Implementers are encouraged to support extended filters. \\n - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. <code>Type</code> should be set to \\\"ExtensionRef\\\" for custom filters. \\n Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. \\n If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersextensionref","title":"obj spec.rules.filters.extensionRef","text":"<p>\"ExtensionRef is an optional, implementation-specific extension to the \\\"filter\\\" behavior.  For example, resource \\\"myroutefilter\\\" in group \\\"networking.example.net\\\"). ExtensionRef MUST NOT be used for core and extended filters. \\n This filter can be used multiple times within the same rule. \\n Support: Implementation-specific\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersextensionrefwithgroup","title":"fn spec.rules.filters.extensionRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersextensionrefwithkind","title":"fn spec.rules.filters.extensionRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is kind of the referent. For example \\\"HTTPRoute\\\" or \\\"Service\\\".\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersextensionrefwithname","title":"fn spec.rules.filters.extensionRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestheadermodifier","title":"obj spec.rules.filters.requestHeaderModifier","text":"<p>\"RequestHeaderModifier defines a schema for a filter that modifies request headers. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithadd","title":"fn spec.rules.filters.requestHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithaddmixin","title":"fn spec.rules.filters.requestHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremove","title":"fn spec.rules.filters.requestHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithremovemixin","title":"fn spec.rules.filters.requestHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithset","title":"fn spec.rules.filters.requestHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifierwithsetmixin","title":"fn spec.rules.filters.requestHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestheadermodifieradd","title":"obj spec.rules.filters.requestHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithname","title":"fn spec.rules.filters.requestHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifieraddwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestheadermodifierset","title":"obj spec.rules.filters.requestHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithname","title":"fn spec.rules.filters.requestHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestheadermodifiersetwithvalue","title":"fn spec.rules.filters.requestHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestmirror","title":"obj spec.rules.filters.requestMirror","text":"<p>\"RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. \\n This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestmirrorbackendref","title":"obj spec.rules.filters.requestMirror.backendRef","text":"<p>\"BackendRef references a resource where mirrored requests are sent. \\n Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. \\n If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \\\"ResolvedRefs\\\" condition on the Route status is set to <code>status: False</code> and not configure this backend in the underlying implementation. \\n If there is a cross-namespace reference to an existing object that is not allowed by a ReferenceGrant, the controller must ensure the \\\"ResolvedRefs\\\"  condition on the Route is set to <code>status: False</code>, with the \\\"RefNotPermitted\\\" reason and not configure this backend in the underlying implementation. \\n In either error case, the Message of the <code>ResolvedRefs</code> Condition should be used to provide more detail about the problem. \\n Support: Extended for Kubernetes Service \\n Support: Implementation-specific for any other resource\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithgroup","title":"fn spec.rules.filters.requestMirror.backendRef.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. For example, \\\"gateway.networking.k8s.io\\\". When unspecified or empty string, core API group is inferred.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithkind","title":"fn spec.rules.filters.requestMirror.backendRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the Kubernetes resource kind of the referent. For example \\\"Service\\\". \\n Defaults to \\\"Service\\\" when not specified. \\n ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. \\n Support: Core (Services with a type other than ExternalName) \\n Support: Implementation-specific (Services with type ExternalName)\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithname","title":"fn spec.rules.filters.requestMirror.backendRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithnamespace","title":"fn spec.rules.filters.requestMirror.backendRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. \\n Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestmirrorbackendrefwithport","title":"fn spec.rules.filters.requestMirror.backendRef.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestredirect","title":"obj spec.rules.filters.requestRedirect","text":"<p>\"RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithhostname","title":"fn spec.rules.filters.requestRedirect.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the hostname to be used in the value of the <code>Location</code> header in the response. When empty, the hostname in the <code>Host</code> header of the request is used. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithport","title":"fn spec.rules.filters.requestRedirect.withPort","text":"<pre><code>withPort(port)\n</code></pre> <p>\"Port is the port to be used in the value of the <code>Location</code> header in the response. \\n If no port is specified, the redirect port MUST be derived using the following rules: \\n * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically \\\"http\\\" to port 80 and \\\"https\\\" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. \\n Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: \\n * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) and use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) and use port 443. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithscheme","title":"fn spec.rules.filters.requestRedirect.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre> <p>\"Scheme is the scheme to be used in the value of the <code>Location</code> header in the response. When empty, the scheme of the request is used. \\n Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectwithstatuscode","title":"fn spec.rules.filters.requestRedirect.withStatusCode","text":"<pre><code>withStatusCode(statusCode)\n</code></pre> <p>\"StatusCode is the HTTP status code to be used in response. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersrequestredirectpath","title":"obj spec.rules.filters.requestRedirect.path","text":"<p>\"Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the <code>Location</code> header. When empty, the request path is used as-is. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplacefullpath","title":"fn spec.rules.filters.requestRedirect.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithreplaceprefixmatch","title":"fn spec.rules.filters.requestRedirect.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersrequestredirectpathwithtype","title":"fn spec.rules.filters.requestRedirect.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersresponseheadermodifier","title":"obj spec.rules.filters.responseHeaderModifier","text":"<p>\"ResponseHeaderModifier defines a schema for a filter that modifies response headers. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithadd","title":"fn spec.rules.filters.responseHeaderModifier.withAdd","text":"<pre><code>withAdd(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithaddmixin","title":"fn spec.rules.filters.responseHeaderModifier.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremove","title":"fn spec.rules.filters.responseHeaderModifier.withRemove","text":"<pre><code>withRemove(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithremovemixin","title":"fn spec.rules.filters.responseHeaderModifier.withRemoveMixin","text":"<pre><code>withRemoveMixin(remove)\n</code></pre> <p>\"Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). \\n Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz \\n Config: remove: [\\\"my-header1\\\", \\\"my-header3\\\"] \\n Output: GET /foo HTTP/1.1 my-header2: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithset","title":"fn spec.rules.filters.responseHeaderModifier.withSet","text":"<pre><code>withSet(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifierwithsetmixin","title":"fn spec.rules.filters.responseHeaderModifier.withSetMixin","text":"<pre><code>withSetMixin(set)\n</code></pre> <p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersresponseheadermodifieradd","title":"obj spec.rules.filters.responseHeaderModifier.add","text":"<p>\"Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: add: - name: \\\"my-header\\\" value: \\\"bar,baz\\\" \\n Output: GET /foo HTTP/1.1 my-header: foo,bar,baz\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithname","title":"fn spec.rules.filters.responseHeaderModifier.add.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifieraddwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.add.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersresponseheadermodifierset","title":"obj spec.rules.filters.responseHeaderModifier.set","text":"<p>\"Set overwrites the request with the given header (name, value) before the action. \\n Input: GET /foo HTTP/1.1 my-header: foo \\n Config: set: - name: \\\"my-header\\\" value: \\\"bar\\\" \\n Output: GET /foo HTTP/1.1 my-header: bar\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithname","title":"fn spec.rules.filters.responseHeaderModifier.set.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersresponseheadermodifiersetwithvalue","title":"fn spec.rules.filters.responseHeaderModifier.set.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersurlrewrite","title":"obj spec.rules.filters.urlRewrite","text":"<p>\"URLRewrite defines a schema for a filter that modifies a request during forwarding. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritewithhostname","title":"fn spec.rules.filters.urlRewrite.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre> <p>\"Hostname is the value to be used to replace the Host header value during forwarding. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesfiltersurlrewritepath","title":"obj spec.rules.filters.urlRewrite.path","text":"<p>\"Path defines a path rewrite. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplacefullpath","title":"fn spec.rules.filters.urlRewrite.path.withReplaceFullPath","text":"<pre><code>withReplaceFullPath(replaceFullPath)\n</code></pre> <p>\"ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritepathwithreplaceprefixmatch","title":"fn spec.rules.filters.urlRewrite.path.withReplacePrefixMatch","text":"<pre><code>withReplacePrefixMatch(replacePrefixMatch)\n</code></pre> <p>\"ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \\\"/foo/bar\\\" with a prefix match of \\\"/foo\\\" and a ReplacePrefixMatch of \\\"/xyz\\\" would be modified to \\\"/xyz/bar\\\". \\n Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the <code>/</code> separator. When specified, a trailing <code>/</code> is ignored. For example, the paths <code>/abc</code>, <code>/abc/</code>, and <code>/abc/def</code> would all match the prefix <code>/abc</code>, but the path <code>/abcd</code> would not. \\n ReplacePrefixMatch is only compatible with a <code>PathPrefix</code> HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>. \\n Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         |  | /bar /foo/        | /foo         |  | / /foo         | /foo         |  | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /\""},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesfiltersurlrewritepathwithtype","title":"fn spec.rules.filters.urlRewrite.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of path modifier. Additional types may be added in a future release of the API. \\n Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. \\n Unknown values here must result in the implementation setting the Accepted Condition for the Route to <code>status: False</code>, with a Reason of <code>UnsupportedValue</code>.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesmatches","title":"obj spec.rules.matches","text":"<p>\"Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if any one of the matches is satisfied. \\n For example, take the following matches configuration: \\n <code>matches: - path: value: \\\"/foo\\\" headers: - name: \\\"version\\\" value: \\\"v2\\\" - path: value: \\\"/v2/foo\\\"</code> \\n For a request to match against this rule, a request must satisfy EITHER of the two conditions: \\n - path prefixed with <code>/foo</code> AND contains the header <code>version: v2</code> - path prefix of <code>/v2/foo</code> \\n See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. \\n If no matches are specified, the default is a prefix path match on \\\"/\\\", which has the effect of matching every HTTP request. \\n Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: \\n * \\\"Exact\\\" path match. * \\\"Prefix\\\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. \\n Note: The precedence of RegularExpression path matches are implementation-specific. \\n If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: \\n * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by \\\"{namespace}/{name}\\\". \\n If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. \\n When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithheaders","title":"fn spec.rules.matches.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithheadersmixin","title":"fn spec.rules.matches.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithmethod","title":"fn spec.rules.matches.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithqueryparams","title":"fn spec.rules.matches.withQueryParams","text":"<pre><code>withQueryParams(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatcheswithqueryparamsmixin","title":"fn spec.rules.matches.withQueryParamsMixin","text":"<pre><code>withQueryParamsMixin(queryParams)\n</code></pre> <p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesmatchesheaders","title":"obj spec.rules.matches.headers","text":"<p>\"Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatchesheaderswithname","title":"fn spec.rules.matches.headers.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). \\n If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \\\"foo\\\" and \\\"Foo\\\" are considered equivalent. \\n When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for \\\"Set-Cookie\\\".\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatchesheaderswithtype","title":"fn spec.rules.matches.headers.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the header. \\n Support: Core (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatchesheaderswithvalue","title":"fn spec.rules.matches.headers.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP Header to be matched.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesmatchespath","title":"obj spec.rules.matches.path","text":"<p>\"Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the \\\"/\\\" path is provided.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatchespathwithtype","title":"fn spec.rules.matches.path.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the path Value. \\n Support: Core (Exact, PathPrefix) \\n Support: Implementation-specific (RegularExpression)\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatchespathwithvalue","title":"fn spec.rules.matches.path.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value of the HTTP path to match against.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#obj-specrulesmatchesqueryparams","title":"obj spec.rules.matches.queryParams","text":"<p>\"QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. \\n Support: Extended\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatchesqueryparamswithname","title":"fn spec.rules.matches.queryParams.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3). \\n If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored. \\n If a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is recommended that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API. \\n Users SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatchesqueryparamswithtype","title":"fn spec.rules.matches.queryParams.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies how to match against the value of the query parameter. \\n Support: Extended (Exact) \\n Support: Implementation-specific (RegularExpression) \\n Since RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.\"</p>"},{"location":"1.0/gateway/v1beta1/httpRoute/#fn-specrulesmatchesqueryparamswithvalue","title":"fn spec.rules.matches.queryParams.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the value of HTTP query param to be matched.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/","title":"gateway.v1beta1.referenceGrant","text":"<p>\"ReferenceGrant identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy. \\n Each ReferenceGrant can be used to represent a unique trust relationship. Additional Reference Grants can be used to add to the set of trusted sources of inbound references for the namespace they are defined within. \\n All cross-namespace references in Gateway API (with the exception of cross-namespace Gateway-route attachment) require a ReferenceGrant. \\n ReferenceGrant is a form of runtime verification allowing users to assert which cross-namespace object references are permitted. Implementations that support ReferenceGrant MUST NOT permit cross-namespace references which have no grant, and MUST respond to the removal of a grant by revoking the access that the grant allowed.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withFrom(from)</code></li> <li><code>fn withFromMixin(from)</code></li> <li><code>fn withTo(to)</code></li> <li><code>fn withToMixin(to)</code></li> <li><code>obj spec.from</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.to</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fields","title":"Fields","text":""},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ReferenceGrant</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#obj-spec","title":"obj spec","text":"<p>\"Spec defines the desired state of ReferenceGrant.\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-specwithfrom","title":"fn spec.withFrom","text":"<pre><code>withFrom(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-specwithfrommixin","title":"fn spec.withFromMixin","text":"<pre><code>withFromMixin(from)\n</code></pre> <p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-specwithto","title":"fn spec.withTo","text":"<pre><code>withTo(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-specwithtomixin","title":"fn spec.withToMixin","text":"<pre><code>withToMixin(to)\n</code></pre> <p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#obj-specfrom","title":"obj spec.from","text":"<p>\"From describes the trusted namespaces and kinds that can reference the resources described in \\\"To\\\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-specfromwithgroup","title":"fn spec.from.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-specfromwithkind","title":"fn spec.from.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field. \\n When used to permit a SecretObjectReference: \\n * Gateway \\n When used to permit a BackendObjectReference: \\n * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-specfromwithnamespace","title":"fn spec.from.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace of the referent. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#obj-specto","title":"obj spec.to","text":"<p>\"To describes the resources that may be referenced by the resources described in \\\"From\\\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-spectowithgroup","title":"fn spec.to.withGroup","text":"<pre><code>withGroup(group)\n</code></pre> <p>\"Group is the group of the referent. When empty, the Kubernetes core API group is inferred. \\n Support: Core\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-spectowithkind","title":"fn spec.to.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \\\"Core\\\" support level for this field: \\n * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference\"</p>"},{"location":"1.0/gateway/v1beta1/referenceGrant/#fn-spectowithname","title":"fn spec.to.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.\"</p>"}]}